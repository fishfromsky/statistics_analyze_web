# Generated by Django 3.2.8 on 2022-01-16 08:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(default='普通用户', max_length=10)),
                ('token', models.CharField(default='', max_length=100, verbose_name='token')),
                ('phone_number', models.CharField(default='', max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='algorithm_project',
            fields=[
                ('project_id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('time', models.IntegerField(default=0)),
                ('describe', models.CharField(max_length=255)),
                ('add_time', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='CollectFactoryList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Crawl_Data_Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_type', models.CharField(max_length=200)),
                ('date', models.DateField(auto_now_add=True)),
                ('time', models.CharField(default='08:30:00', max_length=200)),
                ('key_words', models.CharField(max_length=200)),
                ('city', models.CharField(default='-', max_length=200)),
                ('file_location', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('city_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='FactoryList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('district', models.CharField(default='', max_length=255)),
                ('address', models.CharField(default='', max_length=255)),
                ('company', models.CharField(default='', max_length=255)),
                ('type', models.CharField(default='', max_length=255)),
                ('typeId', models.IntegerField(default=0)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('deal', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/file/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='Garbage_City_Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=250)),
                ('production', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Img',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_url', models.ImageField(upload_to='static/img', verbose_name='图片')),
            ],
        ),
        migrations.CreateModel(
            name='kmeans_project',
            fields=[
                ('project_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('add_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='未运行', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LinearRegression',
            fields=[
                ('project_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('table_size', models.IntegerField(default=0)),
                ('status', models.CharField(default='未运行', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='lstm_project',
            fields=[
                ('project_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('table_size', models.IntegerField(default=0)),
                ('status', models.CharField(default='未运行', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='model_table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('sort_Id', models.IntegerField(default=0)),
                ('pic_url', models.CharField(default='', max_length=255)),
                ('description', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ModelKmeansFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/modelfile/kmeans/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='ModelLinearRegressionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/modelfile/linearregression/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='ModelLSTMFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/modelfile/lstm/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='ModelRegressionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/modelfile/regression/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='ModelRelationFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/modelfile/relation/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='ModelsList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modelname', models.CharField(max_length=100)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('author', models.CharField(default='', max_length=255)),
                ('reference', models.IntegerField(default=0)),
                ('star', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='multi_regression_project',
            fields=[
                ('project_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('table_size', models.IntegerField(default=0)),
                ('status', models.CharField(default='未运行', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='p_median_project',
            fields=[
                ('project_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('basic_size', models.IntegerField()),
                ('ts_size', models.IntegerField()),
                ('rrc_size', models.IntegerField()),
                ('project_state', models.CharField(default='未运行', max_length=200)),
                ('cost_matrix_size', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PmedianBasic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('name', models.CharField(max_length=50, null=True, verbose_name='参数名称')),
                ('value', models.FloatField(null=True, verbose_name='参数值')),
                ('unit', models.CharField(max_length=50, null=True, verbose_name='单位')),
                ('note', models.CharField(max_length=50, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianCostMatrix',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('ts_name', models.CharField(max_length=50, null=True, verbose_name='中转站')),
                ('rrc_name', models.CharField(max_length=50, null=True, verbose_name='集散场')),
                ('cost', models.FloatField(null=True, verbose_name='成本(碳排放)')),
                ('cost_unit', models.CharField(max_length=50, null=True, verbose_name='单位')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianOutputAllocationMatrix',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('ts', models.CharField(max_length=50, null=True, verbose_name='集散场')),
                ('p_value', models.IntegerField(null=True, verbose_name='p值')),
                ('rrc', models.CharField(max_length=50, null=True, verbose_name='中转站')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianOutputBuildScale',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('p_value', models.IntegerField(null=True, verbose_name='p值')),
                ('rrc', models.CharField(max_length=50, null=True, verbose_name='集散场')),
                ('rrc_scale', models.FloatField(null=True, verbose_name='集散场规模')),
                ('scale_unit', models.CharField(max_length=50, null=True, verbose_name='规模单位')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianOutputCostMatrix',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('p', models.IntegerField(null=True, verbose_name='p值')),
                ('transport_cost', models.FloatField(null=True, verbose_name='交通成本')),
                ('scale_cost', models.FloatField(null=True, verbose_name='规模成本')),
                ('total_cost', models.FloatField(null=True, verbose_name='总成本')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianRecyclingCenter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('district', models.CharField(max_length=50, null=True, verbose_name='区')),
                ('sub_district', models.CharField(max_length=50, null=True, verbose_name='街镇')),
                ('location', models.CharField(max_length=50, null=True, verbose_name='位置')),
                ('lng', models.FloatField(null=True, verbose_name='经度')),
                ('lat', models.FloatField(null=True, verbose_name='纬度')),
                ('max_load', models.FloatField(null=True, verbose_name='处理量')),
                ('max_load_unit', models.CharField(max_length=50, null=True, verbose_name='单位')),
                ('has_selected', models.BooleanField(default=0, null=True, verbose_name='已选择')),
            ],
        ),
        migrations.CreateModel(
            name='PmedianTransferStation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('project_id', models.CharField(max_length=50, null=True, verbose_name='项目编号')),
                ('sub_names', models.CharField(max_length=50, null=True, verbose_name='所属街镇')),
                ('weight_percentage', models.FloatField(null=True, verbose_name='产量权重因子')),
                ('lng', models.FloatField(null=True, verbose_name='经度')),
                ('lat', models.FloatField(null=True, verbose_name='维度')),
                ('district', models.CharField(max_length=50, null=True, verbose_name='所属区')),
            ],
        ),
        migrations.CreateModel(
            name='relation_project',
            fields=[
                ('project_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('add_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='未运行', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TestFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(upload_to='static/testfile/%Y/%m/%d', verbose_name='文件')),
            ],
        ),
        migrations.CreateModel(
            name='TestReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm', models.CharField(default='', max_length=255)),
                ('project_id', models.CharField(default='', max_length=200)),
                ('sort', models.IntegerField(default=1)),
                ('formula', models.TextField(default='')),
                ('r_square', models.CharField(default='', max_length=255)),
                ('mse', models.CharField(default='', max_length=255)),
                ('rmse', models.CharField(default='', max_length=255)),
                ('mae', models.CharField(default='', max_length=255)),
                ('choose_col', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='TransferFactoryList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('capacity', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_names', models.CharField(max_length=200)),
                ('weight_percentage', models.FloatField()),
                ('lng', models.FloatField()),
                ('lat', models.FloatField()),
                ('district', models.CharField(max_length=200)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.p_median_project')),
            ],
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('district_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.district')),
            ],
        ),
        migrations.CreateModel(
            name='selected_algorithm_table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='未运行', max_length=100)),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.algorithm_project')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.model_table')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='rrc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=200)),
                ('sub_district', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('lng', models.FloatField()),
                ('lat', models.FloatField()),
                ('max_load', models.IntegerField()),
                ('has_selected', models.IntegerField()),
                ('district_no', models.IntegerField()),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.p_median_project')),
            ],
        ),
        migrations.CreateModel(
            name='relation_RF_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('value', models.FloatField(max_length=255)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('sort', models.IntegerField(default=1)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.relation_project')),
            ],
        ),
        migrations.CreateModel(
            name='relation_hot_matrix_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('year', models.FloatField(default=0, max_length=255)),
                ('garbage_clear', models.FloatField()),
                ('population', models.FloatField()),
                ('ratio_city_rural', models.FloatField()),
                ('household', models.FloatField()),
                ('people_per_capita', models.FloatField()),
                ('ratio_sex', models.FloatField()),
                ('age_0_14', models.FloatField()),
                ('age_15_64', models.FloatField()),
                ('age_65', models.FloatField()),
                ('disposable_income', models.FloatField()),
                ('consume_cost', models.FloatField()),
                ('public_cost', models.FloatField()),
                ('gdp', models.FloatField()),
                ('gdp_first_industry', models.FloatField()),
                ('gdp_second_industry', models.FloatField()),
                ('gdp_third_industry', models.FloatField()),
                ('gnp', models.FloatField()),
                ('education', models.FloatField()),
                ('sort', models.IntegerField(default=1)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.relation_project')),
            ],
        ),
        migrations.CreateModel(
            name='Population_Info_District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=255)),
                ('population', models.CharField(max_length=255)),
                ('population_density', models.CharField(max_length=255)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.district')),
            ],
        ),
        migrations.CreateModel(
            name='Population_Info_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('population', models.FloatField(default=0, max_length=200, null=True)),
                ('population_density', models.FloatField(default=0, max_length=200, null=True)),
                ('population_rate', models.FloatField(null=True)),
                ('households', models.FloatField(default=0, max_length=200, null=True)),
                ('average_person_per_household', models.FloatField(default=0, max_length=200, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='PearsonResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('relate', models.FloatField()),
                ('pvalue', models.FloatField()),
                ('sort', models.IntegerField(default=1)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.relation_project')),
            ],
        ),
        migrations.CreateModel(
            name='multi_regression_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pred', models.FloatField()),
                ('real', models.FloatField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('sort', models.IntegerField(default=1)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.multi_regression_project')),
            ],
        ),
        migrations.CreateModel(
            name='lstm_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=255)),
                ('real', models.FloatField()),
                ('pred', models.FloatField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('sort', models.IntegerField(default=1)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.lstm_project')),
            ],
        ),
        migrations.CreateModel(
            name='LinearRegressionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pred', models.FloatField()),
                ('real', models.FloatField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('sort', models.IntegerField(default=1)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.linearregression')),
            ],
        ),
        migrations.CreateModel(
            name='kmeans_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xaxis', models.FloatField()),
                ('yaxis', models.FloatField()),
                ('label', models.IntegerField(default=0)),
                ('district', models.CharField(default='', max_length=255)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('sort', models.IntegerField(default=1)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.kmeans_project')),
            ],
        ),
        migrations.CreateModel(
            name='Grey_Relation_Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('garbage_clear', models.FloatField()),
                ('population', models.FloatField()),
                ('ratio_city_rural', models.FloatField()),
                ('household', models.FloatField()),
                ('people_per_capita', models.FloatField()),
                ('ratio_sex', models.FloatField()),
                ('age_0_14', models.FloatField()),
                ('age_15_64', models.FloatField()),
                ('age_65', models.FloatField()),
                ('disposable_income', models.FloatField()),
                ('consume_cost', models.FloatField()),
                ('public_cost', models.FloatField()),
                ('gdp', models.FloatField()),
                ('gdp_first_industry', models.FloatField()),
                ('gdp_second_industry', models.FloatField()),
                ('gdp_third_industry', models.FloatField()),
                ('gnp', models.FloatField()),
                ('education', models.FloatField()),
                ('sort', models.IntegerField(default=1)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.relation_project')),
            ],
        ),
        migrations.CreateModel(
            name='Gargage_Deal_Capacity_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('deal_num_total', models.CharField(default='', max_length=200)),
                ('landfill', models.CharField(default='', max_length=200)),
                ('incineration', models.CharField(default='', max_length=200)),
                ('compost', models.CharField(default='', max_length=200)),
                ('else_num', models.CharField(default='', max_length=200)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='Gargabe_Deal_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('collect_factory_num', models.CharField(default='', max_length=255)),
                ('factory_num_total', models.CharField(default='', max_length=255)),
                ('landFill', models.CharField(default='', max_length=255)),
                ('incineration', models.CharField(default='', max_length=255)),
                ('compost', models.CharField(default='', max_length=255)),
                ('else_num', models.CharField(default='', max_length=255)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='GarbageIron',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(default='', max_length=255)),
                ('produce', models.CharField(default='', max_length=255)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='Garbage_Info_Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('production', models.CharField(default='', max_length=255)),
                ('year', models.CharField(max_length=255)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.district')),
            ],
        ),
        migrations.CreateModel(
            name='Garbage_Info_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('collect_transport_garbage', models.CharField(default='', max_length=200)),
                ('volume_of_treated', models.CharField(default='', max_length=200)),
                ('rate_of_treated', models.CharField(default='', max_length=200)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='garbage_element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=255)),
                ('cook', models.CharField(default='', max_length=200)),
                ('paper', models.CharField(default='', max_length=200)),
                ('plastic', models.CharField(default='', max_length=200)),
                ('clothe', models.CharField(default='', max_length=200)),
                ('wood', models.CharField(default='', max_length=200)),
                ('ash', models.CharField(default='', max_length=200)),
                ('china', models.CharField(default='', max_length=200)),
                ('glass', models.CharField(default='', max_length=200)),
                ('metal', models.CharField(default='', max_length=200)),
                ('other', models.CharField(default='', max_length=200)),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='Garbage_District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('garbage', models.CharField(default='', max_length=255)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.district')),
            ],
        ),
        migrations.CreateModel(
            name='Garbage_Deal_Volume_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('deal_volume_total', models.CharField(default='', max_length=200)),
                ('landfill', models.CharField(default='', max_length=200)),
                ('incineration', models.CharField(default='', max_length=200)),
                ('compost', models.CharField(default='', max_length=200)),
                ('else_num', models.CharField(default='', max_length=200)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='garbage_clear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(default='', max_length=200)),
                ('wet', models.CharField(default='', max_length=200)),
                ('dry', models.CharField(default='', max_length=200)),
                ('recycle', models.CharField(default='', max_length=200)),
                ('harm', models.CharField(default='', max_length=200)),
                ('total', models.CharField(default='', max_length=200)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment_Result_Excel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(default='', max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Economy_Info_District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=255)),
                ('gdp', models.CharField(default='', max_length=255)),
                ('gdp_first_industry', models.CharField(default='', max_length=255)),
                ('gdp_second_industry', models.CharField(default='', max_length=255)),
                ('gdp_third_industry', models.CharField(default='', max_length=255)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.district')),
            ],
        ),
        migrations.CreateModel(
            name='Economy_Info_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('gdp', models.CharField(max_length=200, null=True)),
                ('gdp_per_capita', models.CharField(max_length=200, null=True)),
                ('gdp_growth_rate', models.FloatField(null=True)),
                ('gdp_first_industry', models.FloatField(null=True)),
                ('gdp_second_industry', models.FloatField(null=True)),
                ('gdp_third_industry', models.FloatField(null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='Dangerous_Garbage_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=200)),
                ('production', models.CharField(default='', max_length=200)),
                ('deal', models.CharField(default='', max_length=200)),
                ('use', models.CharField(default='', max_length=200)),
                ('store', models.CharField(default='', max_length=200)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.CreateModel(
            name='cost_matrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Euclid_distance', models.FloatField()),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.p_median_project')),
            ],
        ),
        migrations.CreateModel(
            name='basic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('value', models.FloatField()),
                ('unit', models.CharField(max_length=200)),
                ('note', models.CharField(max_length=200)),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.p_median_project')),
            ],
        ),
    ]
