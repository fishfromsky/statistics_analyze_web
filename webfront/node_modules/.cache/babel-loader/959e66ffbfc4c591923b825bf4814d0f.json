{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\element\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\element\\index.vue","mtime":1609073358402},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _model = require(\"@/api/model\");\n\nvar _biggarbage = _interopRequireDefault(require(\"./components/biggarbage.vue\"));\n\nvar _graphchart = _interopRequireDefault(require(\"./components/graphchart.vue\"));\n\nvar _smallgarbage = _interopRequireDefault(require(\"./components/smallgarbage.vue\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"index\",\n  components: {\n    biggarbage: _biggarbage.default,\n    graphchart: _graphchart.default,\n    smallgarbage: _smallgarbage.default\n  },\n  data: function data() {\n    return {\n      data: null,\n      data1: {\n        year: [],\n        cook: [],\n        paper: [],\n        plastic: [],\n        other: []\n      },\n      data3: {\n        year: [],\n        wet: [],\n        dry: [],\n        recycle: [],\n        harm: [],\n        total: []\n      },\n      data2: [],\n      graphyear: '2016',\n      chooseyear: []\n    };\n  },\n  watch: {\n    graphyear: function graphyear(val) {\n      this.getGraphData(val);\n    }\n  },\n  methods: {\n    getGraphData: function getGraphData(year) {\n      for (var i = 0; i < this.data.length; i++) {\n        if (this.data[i].year === year) {\n          var list = [];\n          list.push({\n            value: parseFloat(this.data[i].cook).toFixed(2),\n            name: '厨余类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].paper).toFixed(2),\n            name: '纸类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].plastic).toFixed(2),\n            name: '橡塑类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].clothe).toFixed(2),\n            name: '纺织类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].wood).toFixed(2),\n            name: '木竹类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].ash).toFixed(2),\n            name: '灰土类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].china).toFixed(2),\n            name: '砖瓦陶瓷类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].glass).toFixed(2),\n            name: '玻璃类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].metal).toFixed(2),\n            name: '金属类'\n          });\n          list.push({\n            value: parseFloat(this.data[i].other).toFixed(2),\n            name: '其他类'\n          });\n          this.data2 = list;\n          break;\n        }\n      }\n    },\n    getData: function getData() {\n      var _this = this;\n\n      (0, _model.getgarbageelement)().then(function (res) {\n        if (res.code === 20000) {\n          _this.data = res.data;\n\n          _this.data.sort(function (a, b) {\n            return parseInt(a.year) > parseInt(b.year) ? 1 : -1;\n          });\n\n          for (var i = 0; i < _this.data.length; i++) {\n            _this.data1.year.push(_this.data[i].year);\n\n            _this.chooseyear.push({\n              value: _this.data[i].year,\n              label: _this.data[i].year\n            });\n\n            _this.data1.cook.push(parseFloat(parseFloat(_this.data[i].cook).toFixed(2)));\n\n            _this.data1.paper.push(parseFloat(parseFloat(_this.data[i].paper).toFixed(2)));\n\n            _this.data1.plastic.push(parseFloat(parseFloat(_this.data[i].plastic).toFixed(2)));\n\n            _this.data1.other.push(parseFloat(parseFloat(_this.data[i].other).toFixed(2)) + parseFloat(parseFloat(_this.data[i].clothe).toFixed(2)) + parseFloat(parseFloat(_this.data[i].wood).toFixed(2)) + parseFloat(parseFloat(_this.data[i].ash).toFixed(2)) + parseFloat(parseFloat(_this.data[i].china).toFixed(2)) + parseFloat(parseFloat(_this.data[i].glass).toFixed(2)) + parseFloat(parseFloat(_this.data[i].metal).toFixed(2)));\n          }\n\n          _this.getGraphData(_this.data[_this.data.length - 1].year);\n        }\n      });\n      (0, _model.getgarbageclearperday)().then(function (res) {\n        if (res.code === 20000) {\n          var result = res.data;\n          result.sort(function (a, b) {\n            return parseInt(a.year) > parseInt(b.year);\n          });\n\n          for (var i = 0; i < result.length; i++) {\n            _this.data3.year.push(result[i].year);\n\n            _this.data3.wet.push(parseFloat(result[i].wet));\n\n            _this.data3.dry.push(parseFloat(result[i].dry));\n\n            _this.data3.recycle.push(parseFloat(result[i].recycle));\n\n            _this.data3.harm.push(parseFloat(result[i].harm));\n\n            _this.data3.total.push(parseFloat(result[i].total));\n          }\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.getData();\n  }\n};\nexports.default = _default;",null]}