{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\utils\\request.js","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\utils\\request.js","mtime":1609073358354},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// import { setToken } from '@/utils/auth'\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 600000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  // if (getRole()) {\n  //   // let each request carry token\n  //   // ['X-Token'] is a custom headers key\n  //   // please modify it according to the actual situation\n  //   config.headers['X-Role'] = getRole()\n  // }\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n */\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data; // if the custom code is not 20000, it is judged as an error.\n\n  if (res.code !== 20000) {\n    (0, _elementUi.Message)({\n      message: res.message || 'Error',\n      type: 'error',\n      duration: 5 * 1000\n    }); // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n\n    if (res.code === 20001) {\n      // to re-login\n      console.log('to re-login');\n      (0, _auth.removeToken)(); // location.reload()\n    } // if (res.code === 50000){\n    //   return res\n    // }\n\n\n    if (res.code === 20002) {\n      return res;\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    // setToken(res.token)\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}