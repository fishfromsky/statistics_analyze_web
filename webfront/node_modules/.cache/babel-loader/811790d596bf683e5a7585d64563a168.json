{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\permission.js","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\permission.js","mtime":1609073358349},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _router = _interopRequireDefault(require(\"./router\"));\n\nvar _store = _interopRequireDefault(require(\"./store\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _nprogress = _interopRequireDefault(require(\"nprogress\"));\n\nrequire(\"nprogress/nprogress.css\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _getPageTitle = _interopRequireDefault(require(\"@/utils/get-page-title\"));\n\n// progress bar\n// progress bar style\n// get token from cookie\n_nprogress.default.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\n\nvar whiteList = ['/login', '/auth-redirect']; // no redirect whitelist\n\n_router.default.beforeEach( /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var hasToken, hasRoles, _yield$store$dispatch, roles, accessRoutes;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // start progress bar\n            _nprogress.default.start(); // set page title\n\n\n            document.title = (0, _getPageTitle.default)(to.meta.title); // determine whether the user has logged in\n\n            hasToken = (0, _auth.getToken)();\n\n            if (!hasToken) {\n              _context.next = 35;\n              break;\n            }\n\n            if (!(to.path === '/login')) {\n              _context.next = 9;\n              break;\n            }\n\n            // if is logged in, redirect to the home page\n            next({\n              path: '/'\n            });\n\n            _nprogress.default.done();\n\n            _context.next = 33;\n            break;\n\n          case 9:\n            // determine whether the user has obtained his permission roles through getInfo\n            hasRoles = _store.default.getters.roles && _store.default.getters.roles.length > 0;\n\n            if (!hasRoles) {\n              _context.next = 14;\n              break;\n            }\n\n            next();\n            _context.next = 33;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.next = 17;\n            return _store.default.dispatch('user/getInfo');\n\n          case 17:\n            _yield$store$dispatch = _context.sent;\n            roles = _yield$store$dispatch.roles;\n            _context.next = 21;\n            return _store.default.dispatch('permission/generateRoutes', roles);\n\n          case 21:\n            accessRoutes = _context.sent;\n\n            // dynamically add accessible routes\n            _router.default.addRoutes(accessRoutes); // hack method to ensure that addRoutes is complete\n            // set the replace: true, so the navigation will not leave a history record\n\n\n            next((0, _objectSpread2.default)((0, _objectSpread2.default)({}, to), {}, {\n              replace: true\n            }));\n            _context.next = 33;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](14);\n            _context.next = 30;\n            return _store.default.dispatch('user/resetToken');\n\n          case 30:\n            _elementUi.Message.error(_context.t0 || 'Has Error');\n\n            next(\"/login?redirect=\".concat(to.path));\n\n            _nprogress.default.done();\n\n          case 33:\n            _context.next = 36;\n            break;\n\n          case 35:\n            /* has no token*/\n            if (whiteList.indexOf(to.path) !== -1) {\n              // in the free login whitelist, go directly\n              next();\n            } else {\n              // other pages that do not have permission to access are redirected to the login page.\n              next(\"/login?redirect=\".concat(to.path));\n\n              _nprogress.default.done();\n            }\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[14, 26]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n_router.default.afterEach(function () {\n  // finish progress bar\n  _nprogress.default.done();\n});",null]}