{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\vendor\\Export2Excel.js","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\vendor\\Export2Excel.js","mtime":1609073358355},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.export_table_to_excel = export_table_to_excel;\nexports.export_json_to_excel = export_json_to_excel;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/projectsAll/statistics_analyze_web/webfront/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nvar _fileSaver = require(\"file-saver\");\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\n/* eslint-disable */\nfunction generateArray(table) {\n  var out = [];\n  var rows = table.querySelectorAll('tr');\n  var ranges = [];\n\n  for (var R = 0; R < rows.length; ++R) {\n    var outRow = [];\n    var row = rows[R];\n    var columns = row.querySelectorAll('td');\n\n    for (var C = 0; C < columns.length; ++C) {\n      var cell = columns[C];\n      var colspan = cell.getAttribute('colspan');\n      var rowspan = cell.getAttribute('rowspan');\n      var cellValue = cell.innerText;\n      if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue; //Skip ranges\n\n      ranges.forEach(function (range) {\n        if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\n          for (var i = 0; i <= range.e.c - range.s.c; ++i) {\n            outRow.push(null);\n          }\n        }\n      }); //Handle Row Span\n\n      if (rowspan || colspan) {\n        rowspan = rowspan || 1;\n        colspan = colspan || 1;\n        ranges.push({\n          s: {\n            r: R,\n            c: outRow.length\n          },\n          e: {\n            r: R + rowspan - 1,\n            c: outRow.length + colspan - 1\n          }\n        });\n      }\n\n      ; //Handle Value\n\n      outRow.push(cellValue !== \"\" ? cellValue : null); //Handle Colspan\n\n      if (colspan) for (var k = 0; k < colspan - 1; ++k) {\n        outRow.push(null);\n      }\n    }\n\n    out.push(outRow);\n  }\n\n  return [out, ranges];\n}\n\n;\n\nfunction datenum(v, date1904) {\n  if (date1904) v += 1462;\n  var epoch = Date.parse(v);\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n}\n\nfunction sheet_from_array_of_arrays(data, opts) {\n  var ws = {};\n  var range = {\n    s: {\n      c: 10000000,\n      r: 10000000\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n\n  for (var R = 0; R != data.length; ++R) {\n    for (var C = 0; C != data[R].length; ++C) {\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      var cell = {\n        v: data[R][C]\n      };\n      if (cell.v == null) continue;\n\n      var cell_ref = _xlsx.default.utils.encode_cell({\n        c: C,\n        r: R\n      });\n\n      if (typeof cell.v === 'number') cell.t = 'n';else if (typeof cell.v === 'boolean') cell.t = 'b';else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.z = _xlsx.default.SSF._table[14];\n        cell.v = datenum(cell.v);\n      } else cell.t = 's';\n      ws[cell_ref] = cell;\n    }\n  }\n\n  if (range.s.c < 10000000) ws['!ref'] = _xlsx.default.utils.encode_range(range);\n  return ws;\n}\n\nfunction Workbook() {\n  if (!(this instanceof Workbook)) return new Workbook();\n  this.SheetNames = [];\n  this.Sheets = {};\n}\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n\n  for (var i = 0; i != s.length; ++i) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n\n  return buf;\n}\n\nfunction export_table_to_excel(id) {\n  var theTable = document.getElementById(id);\n  var oo = generateArray(theTable);\n  var ranges = oo[1];\n  /* original data */\n\n  var data = oo[0];\n  var ws_name = \"SheetJS\";\n  var wb = new Workbook(),\n      ws = sheet_from_array_of_arrays(data);\n  /* add ranges to worksheet */\n  // ws['!cols'] = ['apple', 'banan'];\n\n  ws['!merges'] = ranges;\n  /* add worksheet to workbook */\n\n  wb.SheetNames.push(ws_name);\n  wb.Sheets[ws_name] = ws;\n\n  var wbout = _xlsx.default.write(wb, {\n    bookType: 'xlsx',\n    bookSST: false,\n    type: 'binary'\n  });\n\n  (0, _fileSaver.saveAs)(new Blob([s2ab(wbout)], {\n    type: \"application/octet-stream\"\n  }), \"test.xlsx\");\n}\n\nfunction export_json_to_excel() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$multiHeader = _ref.multiHeader,\n      multiHeader = _ref$multiHeader === void 0 ? [] : _ref$multiHeader,\n      header = _ref.header,\n      data = _ref.data,\n      filename = _ref.filename,\n      _ref$merges = _ref.merges,\n      merges = _ref$merges === void 0 ? [] : _ref$merges,\n      _ref$autoWidth = _ref.autoWidth,\n      autoWidth = _ref$autoWidth === void 0 ? true : _ref$autoWidth,\n      _ref$bookType = _ref.bookType,\n      bookType = _ref$bookType === void 0 ? 'xlsx' : _ref$bookType;\n\n  /* original data */\n  filename = filename || 'excel-list';\n  data = (0, _toConsumableArray2.default)(data);\n  data.unshift(header);\n\n  for (var i = multiHeader.length - 1; i > -1; i--) {\n    data.unshift(multiHeader[i]);\n  }\n\n  var ws_name = \"SheetJS\";\n  var wb = new Workbook(),\n      ws = sheet_from_array_of_arrays(data);\n\n  if (merges.length > 0) {\n    if (!ws['!merges']) ws['!merges'] = [];\n    merges.forEach(function (item) {\n      ws['!merges'].push(_xlsx.default.utils.decode_range(item));\n    });\n  }\n\n  if (autoWidth) {\n    /*设置worksheet每列的最大宽度*/\n    var colWidth = data.map(function (row) {\n      return row.map(function (val) {\n        /*先判断是否为null/undefined*/\n        if (val == null) {\n          return {\n            'wch': 10\n          };\n        }\n        /*再判断是否为中文*/\n        else if (val.toString().charCodeAt(0) > 255) {\n            return {\n              'wch': val.toString().length * 2\n            };\n          } else {\n            return {\n              'wch': val.toString().length\n            };\n          }\n      });\n    });\n    /*以第一行为初始值*/\n\n    var result = colWidth[0];\n\n    for (var _i = 1; _i < colWidth.length; _i++) {\n      for (var j = 0; j < colWidth[_i].length; j++) {\n        if (result[j]['wch'] < colWidth[_i][j]['wch']) {\n          result[j]['wch'] = colWidth[_i][j]['wch'];\n        }\n      }\n    }\n\n    ws['!cols'] = result;\n  }\n  /* add worksheet to workbook */\n\n\n  wb.SheetNames.push(ws_name);\n  wb.Sheets[ws_name] = ws;\n\n  var wbout = _xlsx.default.write(wb, {\n    bookType: bookType,\n    bookSST: false,\n    type: 'binary'\n  });\n\n  (0, _fileSaver.saveAs)(new Blob([s2ab(wbout)], {\n    type: \"application/octet-stream\"\n  }), \"\".concat(filename, \".\").concat(bookType));\n}",null]}