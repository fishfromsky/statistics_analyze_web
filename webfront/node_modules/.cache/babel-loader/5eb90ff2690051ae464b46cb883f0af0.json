{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\project\\test\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\project\\test\\index.vue","mtime":1640053529310},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"D:/projectsAll/statistics_analyze_web_2/webfront/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _model = require(\"@/api/model\");\n\nvar _methods;\n\nvar _default = {\n  data: function data() {\n    return {\n      kmeans_dialog: false,\n      result_dialog: false,\n      selectdata: null,\n      note_dialog: false,\n      algorithm_name: \"\",\n      algorithm_Id: null,\n      username: \"\",\n      time: \"\",\n      modellist: [],\n      fileList: [],\n      filedate: \"\",\n      selectfilePath: \"\",\n      tableData: [],\n      table_loading: false,\n      rule: [],\n      select_cols: [],\n      checkList: [],\n      select_cols_num: 0,\n      reference_col: null,\n      col_dialog: false,\n      relative_max: null,\n      excelList: []\n    };\n  },\n  watch: {\n    selectdata: function selectdata(val) {\n      var that = this;\n      var data = {};\n      data[\"url\"] = this.tableData[val].path;\n      this.selectfilePath = this.tableData[val].path;\n      (0, _model.getexcelinfo)(data).then(function (res) {\n        if (res.code === 20000) {\n          that.select_cols = res.cols;\n          that.select_cols_num = res.col_num;\n        }\n      });\n    }\n  },\n  methods: (_methods = {\n    Refresh: function Refresh() {\n      this.getWholeInfo();\n    },\n    seeResult: function seeResult(index) {\n      console.log(index);\n      this.excelList = [];\n      this.result_dialog = true;\n\n      if (index == 16) {\n        this.getExcelResult(_model.getrelationexcelresult);\n      } else if (index == 13) {\n        this.getExcelResult(_model.getlstmexcelresult);\n      } else if (index == 14) {\n        this.getExcelResult(_model.getregressionexcelresult);\n      } else if (index === 15) {\n        this.getExcelResult(_model.getkmeansexcelresult);\n      }\n    },\n    getCookie: function getCookie(name) {\n      var strcookie = document.cookie;\n      var arrcookie = strcookie.split(\"; \");\n\n      for (var i = 0; i < arrcookie.length; i++) {\n        var arr = arrcookie[i].split(\"=\");\n\n        if (arr[0] == name) {\n          return arr[1];\n        }\n      }\n\n      return \"\";\n    },\n    getIndex: function getIndex(arr, item) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == item) {\n          return i;\n        }\n      }\n    },\n    ColSelectKmeansConfirm: function ColSelectKmeansConfirm() {\n      var _this = this;\n\n      var that = this;\n      var index_list = [];\n\n      for (var i = 0; i < this.checkList.length; i++) {\n        index_list.push(this.getIndex(this.select_cols, this.checkList[i]));\n      }\n\n      if (index_list.length != 2) {\n        this.$message.error('当前聚类仅支持两个维度');\n      } else {\n        var Idlist = [];\n\n        for (var _i = 0; _i < this.modellist.length; _i++) {\n          Idlist.push(this.modellist[_i].id);\n        }\n\n        Idlist.shift();\n        var data = {};\n        data[\"name\"] = this.getCookie(\"environment_name\");\n        data[\"algorithm_id\"] = this.algorithm_Id;\n        data[\"model_id\"] = this.modellist[0].id;\n        data[\"path\"] = this.selectfilePath;\n        data[\"select_list\"] = index_list.toString();\n        data['next_list'] = Idlist.toString();\n        data[\"test_type\"] = this.rule[1];\n        (0, _model.grouptestkmeans)(data).then(function (res) {\n          if (res.code === 20000) {\n            that.kmeans_dialog = false;\n\n            _this.$message({\n              type: 'success',\n              message: '实验成功'\n            });\n          }\n        });\n      }\n    },\n    ColSelectConfirm: function ColSelectConfirm() {\n      var _this2 = this;\n\n      var that = this;\n\n      if (this.checkList.length === 0 || this.reference_col === null || this.relative_max === null) {\n        this.$message.error(\"填写信息必须完整\");\n      } else {\n        var index_list = [];\n\n        for (var i = 0; i < this.checkList.length; i++) {\n          index_list.push(this.getIndex(this.select_cols, this.checkList[i]));\n        }\n\n        var index_select = this.getIndex(this.select_cols, this.reference_col);\n        var flag = true;\n\n        for (var _i2 = 0; _i2 < index_list.length; _i2++) {\n          if (index_list[_i2] == index_select) {\n            this.$message.error(\"参考列和实验列不能相同\");\n            flag = false;\n            break;\n          }\n        }\n\n        if (flag) {\n          var data = {};\n          var Idlist = [];\n\n          for (var _i3 = 0; _i3 < this.modellist.length; _i3++) {\n            Idlist.push(this.modellist[_i3].id);\n          }\n\n          Idlist.shift();\n          data[\"name\"] = this.getCookie(\"environment_name\");\n          data[\"algorithm_id\"] = this.algorithm_Id;\n          data[\"model_id\"] = this.modellist[0].id;\n          data[\"path\"] = this.selectfilePath;\n          data[\"relative_max\"] = this.relative_max;\n          data[\"select_list\"] = index_list.toString();\n          data['next_list'] = Idlist.toString();\n          data[\"choose_col\"] = index_select;\n          data[\"test_type\"] = this.rule[1];\n          (0, _model.grouptestrelation)(data).then(function (res) {\n            if (res.code === 20000) {\n              that.col_dialog = false;\n\n              _this2.$message({\n                type: \"success\",\n                message: \"运行成功\"\n              });\n            }\n          });\n        }\n      }\n    },\n    ColSelect: function ColSelect() {\n      if (this.rule[0] === \"1\" && this.rule[1] === \"1\") {\n        this.col_dialog = true;\n      } else if (this.rule[0] === \"1\" && this.rule[1] === \"2\") {\n        this.col_dialog = true;\n      } else if (this.rule[0] === \"2\" && this.rule[1] === \"1\") {\n        this.kmeans_dialog = true;\n      }\n    },\n    handleDownload: function handleDownload(index) {},\n    handleDelete: function handleDelete(index) {},\n    DownloadRelationExcel: function DownloadRelationExcel(index) {},\n    DeleteRelationExcel: function DeleteRelationExcel(index) {\n      var _this3 = this;\n\n      var that = this;\n      var data = {};\n      data[\"url\"] = index;\n      (0, _model.deleterelationexcelresult)(data).then(function (res) {\n        if (res.code === 20000) {\n          that.result_dialog = false;\n\n          _this3.$message({\n            type: \"success\",\n            message: \"删除成功\"\n          });\n        }\n      });\n    },\n    handleSuccess: function handleSuccess() {\n      this.getFileList();\n    },\n    getExcelResult: function getExcelResult(func) {\n      var that = this;\n      var username = this.getCookie(\"environment_name\");\n      var data = {};\n      this.excelList = [];\n      data[\"user\"] = username;\n      func(data).then(function (res) {\n        if (res.code === 20000) {\n          var result = res.data;\n\n          for (var i = 0; i < result.length; i++) {\n            var dict = {};\n            dict[\"url\"] = result[i];\n            var name = result[i].split(\"/\");\n            dict[\"name\"] = name[name.length - 1];\n            that.excelList.push(dict);\n          }\n        }\n      });\n    },\n    getFileList: function getFileList() {\n      var that = this;\n      this.tableData = [];\n      this.table_loading = true;\n      (0, _model.getfilelist)().then(function (res) {\n        if (res.code === 20000) {\n          var data = res.data;\n          that.table_loading = false;\n\n          for (var i = 0; i < data.length; i++) {\n            var dict = {};\n            dict[\"index\"] = i;\n            dict[\"name\"] = data[i].name;\n            dict[\"path\"] = data[i].url;\n            var splttime = data[i].url.split(\"/\");\n            dict[\"time\"] = splttime[splttime.length - 4] + \"年\" + splttime[splttime.length - 3] + \"月\" + splttime[splttime.length - 2] + \"日\";\n            that.tableData.push(dict);\n          }\n        }\n      });\n    },\n    handleError: function handleError() {\n      this.$message.error(\"上传文件失败\");\n    },\n    handleClose: function handleClose() {\n      this.$router.push({\n        path: \"/project/select\"\n      });\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      for (var key in obj) {\n        return false;\n      }\n\n      return true;\n    }\n  }, (0, _defineProperty2.default)(_methods, \"getCookie\", function getCookie(name) {\n    var strcookie = document.cookie;\n    var arrcookie = strcookie.split(\"; \");\n\n    for (var i = 0; i < arrcookie.length; i++) {\n      var arr = arrcookie[i].split(\"=\");\n\n      if (arr[0] == name) {\n        return arr[1];\n      }\n    }\n\n    return \"\";\n  }), (0, _defineProperty2.default)(_methods, \"getmodelList\", function getmodelList() {\n    var data = {};\n    data[\"name\"] = this.username;\n    data[\"algorithm_id\"] = this.algorithm_Id;\n  }), (0, _defineProperty2.default)(_methods, \"getWholeInfo\", function getWholeInfo() {\n    var that = this;\n    var data = {};\n    data['name'] = this.username;\n    data['algorithm_id'] = this.algorithm_Id;\n    (0, _model.algorithmtestinfo)(data).then(function (res) {\n      if (res.code === 20000) {\n        var _data = res.data[0];\n        var algorithm = _data.algorithm;\n        that.modellist = _data.model;\n        that.algorithm_name = algorithm.name;\n        that.algorithm_Id = algorithm.project_id;\n        that.time = algorithm.add_time;\n      }\n    });\n  }), _methods),\n  created: function created() {\n    var that = this;\n    var params = this.$route.query;\n\n    if (this.isEmptyObject(params)) {\n      this.note_dialog = true;\n    } else {\n      var data = {};\n      data[\"name\"] = params.username;\n      this.username = params.username;\n      this.rule = params.rule;\n      data[\"algorithm_id\"] = params.algorithm_Id;\n      (0, _model.algorithmtestinfo)(data).then(function (res) {\n        if (res.code === 20000) {\n          var _data2 = res.data[0];\n          var algorithm = _data2.algorithm;\n          that.modellist = _data2.model;\n          that.algorithm_name = algorithm.name;\n          that.algorithm_Id = algorithm.project_id;\n          that.time = algorithm.add_time;\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.getFileList();\n  }\n};\nexports.default = _default;",null]}