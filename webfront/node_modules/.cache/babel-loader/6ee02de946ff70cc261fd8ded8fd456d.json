{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js!D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\p_median\\test\\test.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\p_median\\test\\test.vue","mtime":1609073358494},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/projectsAll/statistics_analyze_web/webfront/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"D:/projectsAll/statistics_analyze_web/webfront/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _echarts = _interopRequireDefault(require(\"echarts\"));\n\nvar _shanghai = _interopRequireDefault(require(\"./mapdata/shanghai.json\"));\n\nvar _utputallocation = require(\"@/api/app01/utputallocation\");\n\nvar _da = _interopRequireDefault(require(\"element-ui/src/locale/lang/da\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n_echarts.default.registerMap(\"shanghai\", _shanghai.default);\n\nvar _default = {\n  data: function data() {\n    return {\n      map_loading: false,\n      project_id: \"p001\",\n      chinaGeoCoordMap: {},\n      chinaDatas: [],\n      series: [],\n      centrl_geo: [121.477665, 31.226048],\n      zoom: 1.2,\n      selectP: \"\",\n      selectRRC: \"\",\n      chart: null,\n      max_deal: null,\n      min_deal: null\n    };\n  },\n  computed: {\n    option: function option() {\n      return {\n        tooltip: {\n          trigger: \"item\",\n          backgroundColor: \" rgba(0, 161, 255, 0.4)\",\n          borderColor: \"#00faff\",\n          showDelay: 0,\n          hideDelay: 0,\n          enterable: true,\n          transitionDuration: 0,\n          extraCssText: \"z-index:100\",\n          formatter: function formatter(params, ticket, callback) {\n            //根据业务自己拓展要显示的内容\n            var res = \"\";\n\n            if (params.componentSubType === \"effectScatter\") {\n              var name = params.data.name;\n              var value = params.data.value[2];\n              res = \"<span style='color:#fff;'>\" + name + \"</span><br/>数据：\" + value;\n            } else {\n              var value = params.data.value;\n              res = \"<span style='color:#fff;'>p值\" + value + \"</span>\";\n            }\n\n            return res;\n          }\n        },\n        // backgroundColor: \"#013954\",\n        geo: {\n          map: \"shanghai\",\n          zoom: this.zoom,\n          center: this.centrl_geo,\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          roam: true,\n          //是否允许缩放\n          itemStyle: {\n            normal: {\n              color: '#062031',\n              borderWidth: 1.1,\n              borderColor: '#43D0D6'\n            },\n            emphasis: {\n              areaColor: '#43D0D6'\n            }\n          }\n        },\n        series: this.series\n      };\n    }\n  },\n  methods: {\n    controlSeries: function controlSeries(centrl, centrl_geo) {\n      var that = this;\n      [[centrl.name, that.chinaDatas]].forEach(function (item, i) {\n        var _that$series$push;\n\n        that.series.push({\n          type: \"lines\",\n          zlevel: 2,\n          effect: {\n            show: true,\n            period: 2,\n            //箭头指向速度，值越小速度越快\n            trailLength: 0.01,\n            //特效尾迹长度[0,1]值越大，尾迹越长重\n            symbol: \"arrow\",\n            //箭头图标\n            symbolSize: 4 //图标大小\n\n          },\n          lineStyle: {\n            normal: {\n              width: 0.5,\n              //尾迹线条宽度\n              opacity: 1,\n              //尾迹线条透明度\n              curveness: 0.2,\n              //尾迹线条曲直度\n              color: '#33ffff' // 飞线颜色\n\n            }\n          },\n          data: that.convertData(item[1], centrl_geo)\n        }, {\n          type: \"effectScatter\",\n          coordinateSystem: \"geo\",\n          zlevel: 2,\n          rippleEffect: {\n            //涟漪特效\n            period: 4,\n            //动画时间，值越小速度越快\n            brushType: \"stroke\",\n            //波纹绘制方式 stroke, fill\n            scale: 4 //波纹圆环最大限制，值越大波纹越大\n\n          },\n          label: {\n            normal: {\n              show: false,\n              position: \"right\",\n              //显示位置\n              offset: [5, 0],\n              //偏移设置\n              formatter: function formatter(params) {\n                //圆环显示文字\n                return params.data.name;\n              },\n              fontSize: 13\n            },\n            emphasis: {\n              show: true\n            }\n          },\n          symbol: \"circle\",\n          symbolSize: function symbolSize(val) {\n            return 1; //圆环大小\n          },\n          itemStyle: {\n            normal: {\n              show: false,\n              color: \"#ffff00\"\n            }\n          },\n          data: item[1].map(function (dataItem) {\n            return {\n              //在这里定义你所要展示的数据\n              name: dataItem[0].name,\n              value: that.chinaGeoCoordMap[dataItem[0].name].concat([dataItem[0].value])\n            };\n          })\n        }, (_that$series$push = {\n          type: \"effectScatter\",\n          coordinateSystem: \"geo\",\n          zlevel: 3,\n          symbolSize: function symbolSize(val) {\n            return 5 + val[2] * 10 / that.max_deal;\n          },\n          rippleEffect: {\n            brushType: 'stroke'\n          },\n          hoverAnimation: true\n        }, (0, _defineProperty2.default)(_that$series$push, \"rippleEffect\", {\n          //涟漪特效\n          period: 4,\n          brushType: \"stroke\",\n          scale: 4\n        }), (0, _defineProperty2.default)(_that$series$push, \"label\", {\n          formatter: '{b}',\n          position: 'right',\n          show: true\n        }), (0, _defineProperty2.default)(_that$series$push, \"itemStyle\", {\n          color: '#FFB90F',\n          shadowBlur: 10,\n          shadowColor: '#333'\n        }), (0, _defineProperty2.default)(_that$series$push, \"data\", [{\n          name: item[0],\n          value: that.chinaGeoCoordMap[item[0]].concat([centrl.value])\n        }]), _that$series$push));\n      });\n    },\n    isInArray: function isInArray(arr, value) {\n      for (var i = 0; i < arr.length; i++) {\n        if (value === arr[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    selectConfirm: function selectConfirm() {\n      var _this = this;\n\n      this.map_loading = true;\n      this.chinaGeoCoordMap = {};\n      this.chinaDatas = [];\n      this.series = [];\n      var that = this;\n      var data = {};\n      data[\"project_id\"] = this.project_id;\n      data[\"p_value\"] = this.selectP;\n      (0, _utputallocation.fetchall_list)(data).then(function (res) {\n        if (res.code === 20000) {\n          var _data = res.data;\n          var rrc_list = [];\n          var rrc_detail = [];\n          that.max_deal = _data[0].rrc_deal;\n          that.min_deal = _data[0].rrc_deal;\n\n          for (var i = 0; i < _data.length; i++) {\n            if (!that.isInArray(rrc_list, _data[i].rrc)) {\n              rrc_list.push(_data[i].rrc);\n              rrc_detail.push(_data[i]);\n            }\n\n            that.chinaGeoCoordMap[_data[i].ts] = [_data[i].ts_lng, _data[i].ts_lat];\n\n            if (_data[i].rrc_deal > that.max_deal) {\n              that.max_deal = _data[i].rrc_deal;\n            }\n\n            if (_data[i].rrc_deal < that.min_deal) {\n              that.min_deal = _data[i].rrc_deal;\n            }\n          }\n\n          for (var _i = 0; _i < rrc_list.length; _i++) {\n            that.chinaDatas = [];\n\n            for (var j = 0; j < _data.length; j++) {\n              if (_data[j].rrc === rrc_list[_i]) {\n                that.chinaDatas.push([{\n                  name: _data[j].ts,\n                  value: _data[j].p_value\n                }]);\n              }\n            }\n\n            that.chinaGeoCoordMap[rrc_detail[_i].rrc] = [rrc_detail[_i].rrc_lng, rrc_detail[_i].rrc_lat];\n            that.chinaDatas.push([{\n              name: rrc_detail[_i].rrc,\n              value: rrc_detail[_i].p_value\n            }]);\n            that.controlSeries({\n              name: rrc_detail[_i].rrc,\n              value: rrc_detail[_i].rrc_deal\n            }, [rrc_detail[_i].rrc_lng, rrc_detail[_i].rrc_lat]);\n          }\n\n          that.chart.setOption(that.option);\n          that.map_loading = false;\n        } else if (res.code === 50000) {\n          _this.$message.error(res.message);\n        }\n      });\n    },\n    getList: function getList() {\n      var data = {};\n      data[\"project_id\"] = this.project_id;\n      (0, _utputallocation.fetchall_list)(data).then(function (res) {\n        console.log(res);\n      });\n    },\n    convertData: function convertData(data, center) {\n      var res = [];\n\n      for (var i = 0; i < data.length; i++) {\n        var dataItem = data[i];\n        var fromCoord = this.chinaGeoCoordMap[dataItem[0].name];\n        var toCoord = center; //中心点地理坐标\n\n        if (fromCoord && toCoord) {\n          res.push([{\n            coord: fromCoord,\n            value: dataItem[0].value\n          }, {\n            coord: toCoord\n          }]);\n        }\n      }\n\n      return res;\n    }\n  },\n  mounted: function mounted() {\n    // this.getList()\n    this.chart = _echarts.default.init(document.getElementById(\"map\"));\n    this.chart.setOption(this.option);\n  }\n};\nexports.default = _default;",null]}