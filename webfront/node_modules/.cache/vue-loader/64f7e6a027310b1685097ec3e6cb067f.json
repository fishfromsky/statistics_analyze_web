{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\repository\\kmeans\\result\\components\\components\\resultchart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\repository\\kmeans\\result\\components\\components\\resultchart.vue","mtime":1609073358480},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport echarts from 'echarts'\nrequire('echarts/theme/infographic') // echarts theme\nimport resize from './mixins/resize'\nimport { param } from '@/utils'\nexport default {\n    mixins:[resize],\n    props:{\n        className: {\n            type: String,\n            default: 'chart'\n        },\n        width: {\n            type: String,\n            default: '100%'\n        },\n        height: {\n            type: String,\n            default: '250px'\n        },\n        autoResize: {\n            type: Boolean,\n            default: true\n        },\n        chartData: {\n            type: Object,\n            required: true\n        }\n    },\n    data(){\n        return {\n            chart: null,\n            districtlist: [],\n            xlabel: '',\n            ylabel: ''\n        }\n    },\n    computed:{\n        option: function(){\n            let that = this\n            return {\n                title: {\n                    text: 'bi-kmeans聚类分析结果',\n                    left: 'center'\n                },\n                xAxis: {\n                    type: 'value',\n                    name: that.xlabel\n                },\n                yAxis: {\n                    type: 'value',\n                    name: that.ylabel\n                },\n                tooltip: {\n                    axisPointer: {\n                        type: 'cross'\n                    },\n                    formatter(params){\n                        let series_index = params.seriesIndex\n                        let data_index = params.dataIndex\n                        let district = that.districtlist[series_index][data_index]\n                        return `\n                            地区：${district}<br>\n                            横坐标: ${params.data[0]}<br>\n                            纵坐标: ${params.data[1]}\n                        `\n                    }\n                },\n                series: []\n            }\n        }\n    },\n    watch: {\n        chartData: {\n            deep: true,\n            handler(val) {\n                this.setOptions(val)\n            }\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.initChart()\n        })\n    },\n    beforeDestroy() {\n        if (!this.chart) {\n            return\n        }\n        this.chart.dispose();\n        this.chart = null\n    },\n    methods: {\n        getdataoption:function(result, k) {\n            var series = [];\n            for (let i = 0; i < k; i++) {\n                this.option.series.push({\n                    name: 'scatter' + i,\n                    type: 'scatter',\n                    animation: false,\n                    data: result[i],\n                    markPoint: {\n                        symbolSize: 29,\n                        label: {\n                            show: false\n                        },\n                        itemStyle: {\n                            opacity: 0.7\n                        }\n                    }\n                });\n            }\n        },\n        initChart(){\n            this.chart = echarts.init(this.$el, 'infographic');\n            this.setOptions(this.chartData)\n        },\n        setOptions(val){\n            this.xlabel = val.xlabel\n            this.ylabel = val.ylabel\n            this.districtlist = []\n            let label_num = this.judgesortnum(val.label)\n            let dataset = []\n            for (let i=0; i<label_num; i++){\n                dataset.push([])\n                this.districtlist.push([])\n            }\n            for (let i=0; i<val.label.length; i++){\n                let index = val.label[i]\n                dataset[index].push([val.xaxis[i], val.yaxis[i]])\n                this.districtlist[index].push(val.district[i])\n            }\n            this.getdataoption(dataset, label_num)\n            this.chart.setOption(this.option)\n        },\n        judgesortnum:function(list){\n            let tmp_sort = []\n            for (let i=0; i<list.length; i++){\n                if (!this.isInArray(tmp_sort, list[i])){\n                    tmp_sort.push(list[i])\n                }\n            }\n            return tmp_sort.length\n        },\n        isInArray:function(arr,value){\n            for(var i = 0; i < arr.length; i++){\n                if(value === arr[i]){\n                    return true;\n                }\n            }\n            return false;\n        },\n    }\n}\n",null]}