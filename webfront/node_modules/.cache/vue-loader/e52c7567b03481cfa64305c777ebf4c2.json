{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\repository\\linearregression\\result\\components\\result.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\src\\views\\repository\\linearregression\\result\\components\\result.vue","mtime":1609073358484},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web_2\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getlinearregressionresult, getlinearregressiontestreport } from '@/api/model'\r\nimport chartresult from './components/resultchart'\r\nexport default {\r\n    components:{\r\n        chartresult\r\n    },\r\n    props:{\r\n        projectId:{\r\n            type: String,\r\n            required: true\r\n        }\r\n    },\r\n    data(){\r\n        return{\r\n            chart_dialog: false,\r\n            table_loading: false,\r\n            tablekey: 0,\r\n            tableData: [],\r\n            page_data: [],\r\n            total_size: 0,\r\n            currentPage: 1,\r\n            page_size: 10,\r\n            project_id: '',\r\n            filename: 'linear_regression_result',\r\n            autoWidth: true,\r\n            bookType: 'xlsx',\r\n            sort_list: [],\r\n            graph_data:{\r\n                real: [],\r\n                pred: [],\r\n            },\r\n            report: {\r\n                formula: '',\r\n                mse: '',\r\n                mae: '',\r\n                rmse: '',\r\n                r_square: '',\r\n                choose_col: ''\r\n            }\r\n        }\r\n    },\r\n    watch:{\r\n        projectId:function(a, _){\r\n            this.project_id = a\r\n            this.initTable(a)\r\n            this.page_data = []\r\n            this.tableData = []\r\n            this.sort_list = []\r\n        }\r\n    },\r\n    methods:{\r\n        showChart:function(id){\r\n            let that = this\r\n            this.graph_data.real = []\r\n            this.graph_data.pred = []\r\n            this.graph_data.year = []\r\n            this.chart_dialog = true\r\n            let chart_data = this.tableData\r\n            for (let i=0; i<chart_data.length; i++){\r\n                if (chart_data[i].sort === id){\r\n                    this.graph_data.real.push(chart_data[i].real)\r\n                    this.graph_data.pred.push(chart_data[i].pred)\r\n                }\r\n            }\r\n            let dict = {}\r\n            dict['project_id'] = this.projectId\r\n            dict['sort'] = id\r\n            getlinearregressiontestreport(dict).then(res=>{\r\n                if (res.code === 20000){\r\n                    let result = res.data[0]\r\n                    that.report.formula = result.formula\r\n                    that.report.mse = result.mse\r\n                    that.report.mae = result.mae\r\n                    that.report.rmse = result.rmse\r\n                    that.report.r_square = result.r_square\r\n                    that.report.choose_col = result.choose_col\r\n                }\r\n            })\r\n        },\r\n        timeStamptoTime:function(time){\r\n            var date = new Date(time);\r\n            let Y = date.getFullYear() + '-';\r\n            let M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\r\n            let D = date.getDate() + ' ';\r\n            let h = date.getHours() + ':';\r\n            let m = date.getMinutes() + ':';\r\n            let s = date.getSeconds();\r\n            return Y+M+D+h+m+s;\r\n        },\r\n        handleSizeChange:function(val){\r\n            this.table_loading = true\r\n            this.page_size = val\r\n            this.currentPage = 1\r\n            this.page_data = []\r\n            this.initTable(this.project_id)\r\n        },\r\n        handleCurrentChange:function(val){\r\n            this.currentPage = val\r\n            this.page_data = []\r\n            this.initTable(this.project_id)\r\n        },\r\n        initTable:function(id){\r\n            let that = this\r\n            let dict = {}\r\n            dict['project_id'] = id\r\n            this.table_loading = true\r\n            getlinearregressionresult(dict).then(res=>{\r\n                that.table_loading = false\r\n                that.tableData = res.data\r\n                for (let i=0; i<res.data.length; i++){\r\n                    let time = res.data[i].time\r\n                    time = new Date(time.replace(/-/g,'/')).getTime()+3600*1000*8\r\n                    res.data[i].time = that.timeStamptoTime(time)\r\n                }\r\n                let size = that.page_size\r\n                let index = that.currentPage-1\r\n                for (let i=index*size; i<(index+1)*size; i++){\r\n                    if (i==res.data.length){\r\n                        break\r\n                    }\r\n                    that.page_data.push(res.data[i])\r\n                }\r\n                that.total_size = res.data.length\r\n                for (let i=0; i<that.tableData.length; i++){\r\n                    if (!that.isInArray(that.sort_list, that.tableData[i].sort)){\r\n                        that.sort_list.push(that.tableData[i].sort)\r\n                    }\r\n                }\r\n                that.$emit('child-event', that.sort_list)\r\n            })\r\n        },\r\n        isInArray:function(arr,value){\r\n            for(var i = 0; i < arr.length; i++){\r\n                if(value === arr[i]){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        formatJson(filterVal, jsonData) {\r\n            return jsonData.map(v => filterVal.map(j => {\r\n                if (j === 'timestamp') {\r\n                return parseTime(v[j])\r\n                } else {\r\n                return v[j]\r\n                }\r\n            }))\r\n        },\r\n        download:function(){\r\n            import('@/vendor/Export2Excel').then(excel => {\r\n                const tHeader = ['Real', 'Prediction', 'DateTime', 'Sort']\r\n                const filterVal = ['real', 'pred', 'time', 'sort']\r\n                const list = this.tableData\r\n                const data = this.formatJson(filterVal, list)\r\n                excel.export_json_to_excel({\r\n                header: tHeader,\r\n                data,\r\n                filename: this.filename,\r\n                autoWidth: this.autoWidth,\r\n                bookType: this.bookType\r\n                })\r\n            })\r\n        }\r\n    },\r\n    mounted(){\r\n\r\n    }\r\n}\r\n",null]}