{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\linearregression\\result\\components\\result.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\linearregression\\result\\components\\result.vue","mtime":1641987866620},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport CountTo from 'vue-count-to'\r\nimport {\r\n  getlinearregressionmodelresult,\r\n  getlinearregressionresult,\r\n  deletemodelfile,\r\n  makepredictionlinearregression,\r\n  gettestfilelist,\r\n  startlinearpredictionfromexcel,\r\n  getlinearpredictionfromexcel\r\n} from \"@/api/model\";\r\nimport chartresult from \"./components/resultchart\";\r\nexport default {\r\n  components: {\r\n    chartresult,\r\n    CountTo\r\n  },\r\n  props: {\r\n    projectId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      chart_dialog: false,\r\n      table_loading: false,\r\n      tablekey: 0,\r\n      tableData: [],\r\n      weightData: [],\r\n      page_data: [],\r\n      total_size: 0,\r\n      currentPage: 1,\r\n      page_size: 10,\r\n      project_id: \"\",\r\n      filename: \"lstm_result\",\r\n      autoWidth: true,\r\n      bookType: \"xlsx\",\r\n      sort_list: [],\r\n      graph_data: {\r\n        real: [],\r\n        pred: [],\r\n      },\r\n      report: {\r\n        formula: \"\",\r\n        choose_col: \"\",\r\n        choose_data: \"\",\r\n        r_square: \"\",\r\n        mse: \"\",\r\n        rmse: \"\",\r\n        mae: \"\",\r\n      },\r\n      predict_dialog: false,\r\n      predict_form: {\r\n        choose_col: '',\r\n        coef: [],\r\n        intercept: [],\r\n        formula: ''\r\n      },\r\n      formula_params: [],\r\n      predict_result: 0,\r\n      drawer_dialog: false,\r\n      fileList: [],\r\n      selectpredictdatafile: null,\r\n      tablekey_predict: 0,\r\n      tableData_predict: [],\r\n      page_data_predict: [],\r\n      total_size_predict: 0,\r\n      currentPage_predict: 1,\r\n      page_size_predict: 10,\r\n      table_loading_predict: false,\r\n      predictResult: [],\r\n      result_dialog: false\r\n    };\r\n  },\r\n  watch: {\r\n    projectId: function (a, _) {\r\n      this.project_id = a;\r\n      this.page_data = [];\r\n      this.tableData = [];\r\n      this.sort_list = [];\r\n      this.weightData = [];\r\n      this.initTable(a);\r\n    },\r\n  },\r\n  methods: {\r\n    DeletePredictionResult:function(path){\r\n      let data = {}\r\n      data['url'] = path\r\n      deletemodelfile(data).then(res=>{\r\n        if (res.code === 20000){\r\n          this.$message.success('删除成功')\r\n          this.seePredictfromExcel()\r\n        }\r\n      })\r\n    },\r\n    seePredictfromExcel:function(){\r\n      let data = {}\r\n      data['user'] = this.getCookie('environment_name')\r\n      data['project_id'] = this.project_id\r\n      getlinearpredictionfromexcel(data).then(res=>{\r\n        if (res.code === 20000){\r\n          let result = res.data;\r\n          let result_data = [];\r\n          for (let i = 0; i < result.length; i++) {\r\n            let dict = {};\r\n            let split_list = result[i].split(\"/\");\r\n            let path = \"\";\r\n            for (let j = 3; j < split_list.length; j++) {\r\n              if (j != split_list.length - 1) {\r\n                path = path + split_list[j] + \"/\";\r\n              } else {\r\n                path = path + split_list[j];\r\n              }\r\n            }\r\n            dict[\"url\"] = result[i];\r\n            dict[\"file_name\"] = split_list[split_list.length - 1];\r\n            dict[\"path\"] = path;\r\n            result_data.push(dict)\r\n          }\r\n          this.predictResult = result_data\r\n          this.result_dialog = true\r\n        }\r\n      })\r\n    },\r\n    handleSizeChangePreidct:function(val){\r\n      this.table_loading_predict = true;\r\n      this.page_size_predict = val;\r\n      this.currentPage_predict = 1;\r\n      this.page_data_predict = [];\r\n      this.getTestFileList()\r\n    },\r\n    handleCurrentChangePredict:function(val){\r\n      this.currentPage_predict = val;\r\n      this.page_data_predict = [];\r\n      this.getTestFileList()\r\n    },\r\n    deletePredictfromExcel:function(val){\r\n      let data = {}\r\n      data['url'] = this.page_data_predict[val].path\r\n      deletemodelfile(data).then(res=>{\r\n        if (res.code === 20000){\r\n          this.$message.success('删除成功')\r\n          this.tableData_predict = []\r\n          this.page_data_predict = []\r\n          this.getTestFileList()\r\n        }\r\n      })\r\n    },\r\n    startPredictfromExcel:function(val){\r\n      let data = {}\r\n      data['result'] = this.selectpredictdatafile\r\n      data['data'] = this.page_data_predict[val].path\r\n      data['user'] = this.getCookie('environment_name')\r\n      data['project_id'] = this.project_id\r\n      startlinearpredictionfromexcel(data).then(res=>{\r\n        if (res.code === 20000){\r\n          this.$message.success('正在预测中...')\r\n        }\r\n      })\r\n    },\r\n    handleSuccess:function(){\r\n      this.$message.success('上传成功')\r\n      this.getTestFileList()\r\n    },\r\n    handleError:function(){\r\n      this.$message.error('上传失败')\r\n    },\r\n    excelPrediction:function(val){\r\n      this.drawer_dialog = true\r\n      this.selectpredictdatafile = this.page_data[val].path\r\n    },\r\n    getTestFileList:function(){\r\n      this.page_data_predict = []\r\n      this.tableData_predict = []\r\n      this.table_loading_predict = true\r\n      gettestfilelist().then(res=>{\r\n        if (res.code === 20000){\r\n          let data = res.data;\r\n          let predictData = []\r\n          this.table_loading_predict = false\r\n          for (let i = 0; i < data.length; i++) {\r\n            let dict = {}\r\n            dict[\"name\"] = data[i].name;\r\n            dict[\"path\"] = data[i].url;\r\n            let splttime = data[i].url.split(\"/\");\r\n            dict[\"time\"] =\r\n              splttime[splttime.length - 4] +\r\n              \"年\" +\r\n              splttime[splttime.length - 3] +\r\n              \"月\" +\r\n              splttime[splttime.length - 2] +\r\n              \"日\";\r\n            predictData.push(dict);\r\n          }\r\n          this.tableData_predict = predictData\r\n          let size = this.page_size_predict;\r\n          let index = this.currentPage_predict - 1;\r\n          for (let i = index * size; i < (index + 1) * size; i++) {\r\n            if (i == predictData.length) {\r\n              break;\r\n            }\r\n            this.page_data_predict.push(predictData[i]);\r\n          }\r\n          this.total_size_predict = predictData.length;\r\n        }\r\n      })\r\n    },\r\n    startPrediction:function(){\r\n      let flag = true\r\n      for (let i=0; i<this.formula_params.length; i++){\r\n        if (this.formula_params[i] === ''){\r\n          flag = false\r\n          this.$message.error('请输入完整参数')\r\n          break\r\n        }\r\n      }\r\n      if (flag){\r\n        let sum = 0;\r\n        for (let i=0; i<this.formula_params.length; i++){\r\n          sum = sum + this.predict_form.coef[i]*parseFloat(this.formula_params[i])\r\n        }\r\n        sum = sum+this.predict_form.intercept[0]\r\n        this.predict_result = sum.toFixed(4)\r\n      }\r\n    },\r\n    DeleteExcel: function (val) {\r\n      let that = this;\r\n      let data = {};\r\n      data[\"url\"] = this.page_data[val].path;\r\n      deletemodelfile(data).then((res) => {\r\n        if (res.code === 20000) {\r\n            this.$message({\r\n            type: \"success\",\r\n            message: \"删除成功\",\r\n            });\r\n            that.table_loading = true;\r\n            that.tableData = [];\r\n            that.page_data = [];\r\n            that.weightData = [];\r\n            that.initTable(that.project_id);\r\n        }\r\n      });\r\n    },\r\n    getCookie: function (name) {\r\n      var strcookie = document.cookie;\r\n      var arrcookie = strcookie.split(\"; \");\r\n      for (var i = 0; i < arrcookie.length; i++) {\r\n        var arr = arrcookie[i].split(\"=\");\r\n        if (arr[0] == name) {\r\n          return arr[1];\r\n        }\r\n      }\r\n      return \"\";\r\n    },\r\n    initTable: function (project_id) {\r\n      let that = this;\r\n      let data = {};\r\n      data[\"project_id\"] = project_id;\r\n      data[\"user\"] = this.getCookie(\"environment_name\");\r\n      getlinearregressionmodelresult(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          that.table_loading = false;\r\n          let result = res.data;\r\n          let result_data = [];\r\n          for (let i = 0; i < result.length; i++) {\r\n            let dict = {};\r\n            let split_list = result[i].split(\"/\");\r\n            let path = \"\";\r\n            for (let j = 3; j < split_list.length; j++) {\r\n              if (j != split_list.length - 1) {\r\n                path = path + split_list[j] + \"/\";\r\n              } else {\r\n                path = path + split_list[j];\r\n              }\r\n            }\r\n            dict[\"url\"] = result[i];\r\n            dict[\"file_name\"] = split_list[split_list.length - 1];\r\n            dict[\"path\"] = path;\r\n            result_data.push(dict);\r\n          }\r\n          that.tableData = result_data;\r\n          let size = that.page_size;\r\n          let index = that.currentPage - 1;\r\n          for (let i = index * size; i < (index + 1) * size; i++) {\r\n            if (i == result_data.length) {\r\n              break;\r\n            }\r\n            that.page_data.push(result_data[i]);\r\n          }\r\n          that.total_size = result_data.length;\r\n        }\r\n      });\r\n    },\r\n    makePrediction(val){\r\n      let data = {}\r\n      data['path'] = this.page_data[val].path\r\n      makepredictionlinearregression(data).then(res=>{\r\n        if (res.code === 20000){\r\n          this.formula_params = []\r\n          this.predict_form.choose_col = res.choose_col\r\n          this.predict_form.coef = res.coef\r\n          this.predict_form.intercept = res.intercept\r\n          this.predict_form.formula = res.formula\r\n          this.predict_dialog = true\r\n          for (let i=0; i<res.coef.length; i++){\r\n            this.formula_params.push('')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    Visualization(val) {\r\n      let that = this;\r\n      let data = {};\r\n      data[\"path\"] = this.page_data[val].path;\r\n      getlinearregressionresult(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          that.graph_data.pred = res.pred;\r\n          that.graph_data.real = res.fact;\r\n          that.report.choose_col = res.choose_col;\r\n          that.report.choose_data = res.choose_data;\r\n          that.report.formula = res.formula;\r\n          that.report.mse = res.mse;\r\n          that.report.rmse = res.rmse;\r\n          that.report.r_square = res.r_square;\r\n          that.report.mae = res.mae;\r\n          that.chart_dialog = true;\r\n        }\r\n      });\r\n    },\r\n    Download: function (val) {\r\n      let file_path = this.page_data[val].url;\r\n      window.open(file_path);\r\n    },\r\n    handleSizeChange: function (val) {\r\n      this.table_loading = true;\r\n      this.page_size = val;\r\n      this.currentPage = 1;\r\n      this.page_data = [];\r\n      this.initTable(this.project_id);\r\n    },\r\n    handleCurrentChange: function (val) {\r\n      this.currentPage = val;\r\n      this.page_data = [];\r\n      this.initTable(this.project_id);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getTestFileList()\r\n  },\r\n};\r\n",null]}