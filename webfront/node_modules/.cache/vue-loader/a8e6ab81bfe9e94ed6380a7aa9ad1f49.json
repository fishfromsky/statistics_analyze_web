{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\element\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\element\\index.vue","mtime":1609073358402},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getgarbageclearperday, getgarbageelement } from '@/api/model'\nimport biggarbage from './components/biggarbage.vue'\nimport graphchart from './components/graphchart.vue'\nimport smallgarbage from './components/smallgarbage.vue'\nexport default {\n    name: \"index\",\n    components: {\n        biggarbage,\n        graphchart,\n        smallgarbage\n    },\n    data(){\n        return{\n            data: null,\n            data1: {\n                year: [],\n                cook: [],\n                paper: [],\n                plastic: [],\n                other: [],\n            },\n            data3: {\n               year: [],\n               wet: [],\n               dry: [],\n               recycle: [],\n               harm: [],\n               total: []\n            },\n            data2:[],\n            graphyear: '2016',\n            chooseyear: []\n        }\n    },\n    watch:{\n        graphyear(val){\n            this.getGraphData(val)\n        }\n    },\n    methods:{\n        getGraphData(year){\n            for (let i=0; i<this.data.length; i++){\n                if (this.data[i].year === year){\n                    let list = []\n                    list.push({value: parseFloat(this.data[i].cook).toFixed(2), name: '厨余类'})\n                    list.push({value: parseFloat(this.data[i].paper).toFixed(2), name: '纸类'})\n                    list.push({value: parseFloat(this.data[i].plastic).toFixed(2), name: '橡塑类'})\n                    list.push({value: parseFloat(this.data[i].clothe).toFixed(2), name: '纺织类'})\n                    list.push({value: parseFloat(this.data[i].wood).toFixed(2), name: '木竹类'})\n                    list.push({value: parseFloat(this.data[i].ash).toFixed(2), name: '灰土类'})\n                    list.push({value: parseFloat(this.data[i].china).toFixed(2), name: '砖瓦陶瓷类'})\n                    list.push({value: parseFloat(this.data[i].glass).toFixed(2), name: '玻璃类'})\n                    list.push({value: parseFloat(this.data[i].metal).toFixed(2), name: '金属类'})\n                    list.push({value: parseFloat(this.data[i].other).toFixed(2), name: '其他类'})\n                    this.data2 = list\n                    break\n                }\n            }\n        },\n        getData:function(){\n            getgarbageelement().then(res=>{\n                if (res.code === 20000){\n                    this.data = res.data\n                    this.data.sort(function(a, b){\n                        return parseInt(a.year) > parseInt(b.year) ? 1:-1\n                    })\n                    for (let i=0; i<this.data.length; i++){\n                        this.data1.year.push(this.data[i].year)\n                        this.chooseyear.push({value: this.data[i].year, label: this.data[i].year})\n                        this.data1.cook.push(parseFloat(parseFloat(this.data[i].cook).toFixed(2)))\n                        this.data1.paper.push(parseFloat(parseFloat(this.data[i].paper).toFixed(2)))\n                        this.data1.plastic.push(parseFloat(parseFloat(this.data[i].plastic).toFixed(2)))\n                        this.data1.other.push(parseFloat(parseFloat(this.data[i].other).toFixed(2))+parseFloat(parseFloat(this.data[i].clothe).toFixed(2))+\n                        parseFloat(parseFloat(this.data[i].wood).toFixed(2))+parseFloat(parseFloat(this.data[i].ash).toFixed(2))+parseFloat(parseFloat(this.data[i].china).toFixed(2))+\n                        parseFloat(parseFloat(this.data[i].glass).toFixed(2))+parseFloat(parseFloat(this.data[i].metal).toFixed(2)))\n                    }\n                    this.getGraphData(this.data[this.data.length-1].year)\n                }\n            })\n            getgarbageclearperday().then(res=>{\n                if (res.code === 20000){\n                    let result = res.data\n                    result.sort(function(a, b){\n                        return parseInt(a.year) > parseInt(b.year)\n                    })\n                    for (let i=0; i<result.length; i++){\n                        this.data3.year.push(result[i].year)\n                        this.data3.wet.push(parseFloat(result[i].wet))\n                        this.data3.dry.push(parseFloat(result[i].dry))\n                        this.data3.recycle.push(parseFloat(result[i].recycle))\n                        this.data3.harm.push(parseFloat(result[i].harm))\n                        this.data3.total.push(parseFloat(result[i].total))\n                    }\n                }\n            })\n        }\n    },\n    mounted(){\n        this.getData()\n    }\n}\n",null]}