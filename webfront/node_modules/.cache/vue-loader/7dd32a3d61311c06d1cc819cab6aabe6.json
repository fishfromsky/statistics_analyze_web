{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\project\\test\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\project\\test\\index.vue","mtime":1640053529310},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  algorithmtestinfo,\r\n  getexcelinfo,\r\n  getfilelist,\r\n  grouptestrelation,\r\n  getrelationexcelresult,\r\n  deleterelationexcelresult,\r\n  getlstmexcelresult,\r\n  getregressionexcelresult,\r\n  deleteregressionexcelresult,\r\n  grouptestkmeans,\r\n  getkmeansexcelresult\r\n} from \"@/api/model\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      kmeans_dialog: false,\r\n      result_dialog: false,\r\n      selectdata: null,\r\n      note_dialog: false,\r\n      algorithm_name: \"\",\r\n      algorithm_Id: null,\r\n      username: \"\",\r\n      time: \"\",\r\n      modellist: [],\r\n      fileList: [],\r\n      filedate: \"\",\r\n      selectfilePath: \"\",\r\n      tableData: [],\r\n      table_loading: false,\r\n      rule: [],\r\n      select_cols: [],\r\n      checkList: [],\r\n      select_cols_num: 0,\r\n      reference_col: null,\r\n      col_dialog: false,\r\n      relative_max: null,\r\n      excelList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    selectdata(val) {\r\n      let that = this;\r\n      let data = {};\r\n      data[\"url\"] = this.tableData[val].path;\r\n      this.selectfilePath = this.tableData[val].path;\r\n      getexcelinfo(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          that.select_cols = res.cols;\r\n          that.select_cols_num = res.col_num;\r\n        }\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n      Refresh:function(){\r\n          this.getWholeInfo()\r\n      },\r\n      seeResult:function(index){\r\n        console.log(index)\r\n          this.excelList = []\r\n          this.result_dialog = true;\r\n          if (index==16){\r\n            this.getExcelResult(getrelationexcelresult);\r\n          }\r\n          else if (index==13){\r\n            this.getExcelResult(getlstmexcelresult)\r\n          }\r\n          else if (index == 14){\r\n            this.getExcelResult(getregressionexcelresult)\r\n          }\r\n          else if (index === 15){\r\n            this.getExcelResult(getkmeansexcelresult)\r\n          }\r\n      },\r\n    getCookie: function (name) {\r\n      var strcookie = document.cookie;\r\n      var arrcookie = strcookie.split(\"; \");\r\n      for (var i = 0; i < arrcookie.length; i++) {\r\n        var arr = arrcookie[i].split(\"=\");\r\n        if (arr[0] == name) {\r\n          return arr[1];\r\n        }\r\n      }\r\n      return \"\";\r\n    },\r\n    getIndex: function (arr, item) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i] == item) {\r\n          return i;\r\n        }\r\n      }\r\n    },\r\n    ColSelectKmeansConfirm:function(){\r\n      let that = this\r\n      let index_list = []\r\n      for (let i=0; i<this.checkList.length; i++){\r\n        index_list.push(this.getIndex(this.select_cols, this.checkList[i]))\r\n      }\r\n      if (index_list.length != 2){\r\n        this.$message.error('当前聚类仅支持两个维度')\r\n      }\r\n      else{\r\n        let Idlist = []\r\n        for (let i=0; i<this.modellist.length; i++){\r\n          Idlist.push(this.modellist[i].id)\r\n        }\r\n        Idlist.shift()\r\n        let data = {}\r\n        data[\"name\"] = this.getCookie(\"environment_name\");\r\n        data[\"algorithm_id\"] = this.algorithm_Id;\r\n        data[\"model_id\"] = this.modellist[0].id;\r\n        data[\"path\"] = this.selectfilePath;\r\n        data[\"select_list\"] = index_list.toString();\r\n        data['next_list'] = Idlist.toString();\r\n        data[\"test_type\"] = this.rule[1]\r\n        grouptestkmeans(data).then(res=>{\r\n          if (res.code === 20000){\r\n            that.kmeans_dialog = false\r\n            this.$message({\r\n              type: 'success',\r\n              message: '实验成功'\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    ColSelectConfirm: function () {\r\n      let that = this\r\n      if (\r\n        this.checkList.length === 0 ||\r\n        this.reference_col === null ||\r\n        this.relative_max === null\r\n      ) {\r\n        this.$message.error(\"填写信息必须完整\");\r\n      } else {\r\n        let index_list = [];\r\n        for (let i = 0; i < this.checkList.length; i++) {\r\n          index_list.push(this.getIndex(this.select_cols, this.checkList[i]));\r\n        }\r\n        let index_select = this.getIndex(this.select_cols, this.reference_col);\r\n        let flag = true;\r\n        for (let i = 0; i < index_list.length; i++) {\r\n          if (index_list[i] == index_select) {\r\n            this.$message.error(\"参考列和实验列不能相同\");\r\n            flag = false;\r\n            break;\r\n          }\r\n        }\r\n        if (flag) {\r\n          let data = {};\r\n          let Idlist = []\r\n          for (let i=0; i<this.modellist.length; i++){\r\n            Idlist.push(this.modellist[i].id)\r\n          }\r\n          Idlist.shift()\r\n          data[\"name\"] = this.getCookie(\"environment_name\");\r\n          data[\"algorithm_id\"] = this.algorithm_Id;\r\n          data[\"model_id\"] = this.modellist[0].id;\r\n          data[\"path\"] = this.selectfilePath;\r\n          data[\"relative_max\"] = this.relative_max;\r\n          data[\"select_list\"] = index_list.toString();\r\n          data['next_list'] = Idlist.toString();\r\n          data[\"choose_col\"] = index_select;\r\n          data[\"test_type\"] = this.rule[1]\r\n          grouptestrelation(data).then((res) => {\r\n            if (res.code === 20000) {\r\n              that.col_dialog = false\r\n              this.$message({\r\n                type: \"success\",\r\n                message: \"运行成功\",\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    ColSelect: function () {\r\n      if (this.rule[0] === \"1\" && this.rule[1] === \"1\"){\r\n        this.col_dialog = true\r\n      }\r\n      else if (this.rule[0] === \"1\" && this.rule[1] === \"2\"){\r\n        this.col_dialog = true\r\n      }\r\n      else if (this.rule[0] === \"2\" && this.rule[1] === \"1\"){\r\n        this.kmeans_dialog = true\r\n      }\r\n    },\r\n    handleDownload: function (index) {},\r\n    handleDelete: function (index) {},\r\n    DownloadRelationExcel: function (index) {},\r\n    DeleteRelationExcel: function (index) {\r\n      let that = this\r\n      let data = {};\r\n      data[\"url\"] = index;\r\n      deleterelationexcelresult(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          that.result_dialog = false\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"删除成功\",\r\n          });\r\n        }\r\n      });\r\n    },\r\n    handleSuccess: function () {\r\n      this.getFileList();\r\n    },\r\n    getExcelResult(func) {\r\n      let that = this;\r\n      let username = this.getCookie(\"environment_name\");\r\n      let data = {};\r\n      this.excelList = []\r\n      data[\"user\"] = username;\r\n      func(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          let result = res.data;\r\n          for (let i = 0; i < result.length; i++) {\r\n            let dict = {};\r\n            dict[\"url\"] = result[i];\r\n            let name = result[i].split(\"/\");\r\n            dict[\"name\"] = name[name.length - 1];\r\n            that.excelList.push(dict);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    getFileList: function () {\r\n      let that = this;\r\n      this.tableData = [];\r\n      this.table_loading = true;\r\n      getfilelist().then((res) => {\r\n        if (res.code === 20000) {\r\n          let data = res.data;\r\n          that.table_loading = false;\r\n          for (let i = 0; i < data.length; i++) {\r\n            let dict = {};\r\n            dict[\"index\"] = i;\r\n            dict[\"name\"] = data[i].name;\r\n            dict[\"path\"] = data[i].url;\r\n            let splttime = data[i].url.split(\"/\");\r\n            dict[\"time\"] =\r\n              splttime[splttime.length - 4] +\r\n              \"年\" +\r\n              splttime[splttime.length - 3] +\r\n              \"月\" +\r\n              splttime[splttime.length - 2] +\r\n              \"日\";\r\n            that.tableData.push(dict);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    handleError: function () {\r\n      this.$message.error(\"上传文件失败\");\r\n    },\r\n    handleClose: function () {\r\n      this.$router.push({\r\n        path: \"/project/select\",\r\n      });\r\n    },\r\n    isEmptyObject: function (obj) {\r\n      for (var key in obj) {\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    getCookie: function (name) {\r\n      var strcookie = document.cookie;\r\n      var arrcookie = strcookie.split(\"; \");\r\n      for (var i = 0; i < arrcookie.length; i++) {\r\n        var arr = arrcookie[i].split(\"=\");\r\n        if (arr[0] == name) {\r\n          return arr[1];\r\n        }\r\n      }\r\n      return \"\";\r\n    },\r\n    getmodelList: function () {\r\n      let data = {};\r\n      data[\"name\"] = this.username;\r\n      data[\"algorithm_id\"] = this.algorithm_Id;\r\n    },\r\n    getWholeInfo:function(){\r\n        let that = this\r\n        let data = {}\r\n        data['name'] = this.username\r\n        data['algorithm_id'] = this.algorithm_Id\r\n        algorithmtestinfo(data).then(res=>{\r\n            if (res.code === 20000){\r\n                let data = res.data[0];\r\n                let algorithm = data.algorithm;\r\n                that.modellist = data.model;\r\n                that.algorithm_name = algorithm.name;\r\n                that.algorithm_Id = algorithm.project_id;\r\n                that.time = algorithm.add_time;\r\n            }\r\n        })\r\n    }\r\n  },\r\n  created() {\r\n    let that = this;\r\n    let params = this.$route.query;\r\n    if (this.isEmptyObject(params)) {\r\n      this.note_dialog = true;\r\n    } else {\r\n      let data = {};\r\n      data[\"name\"] = params.username;\r\n      this.username = params.username;\r\n      this.rule = params.rule;\r\n      data[\"algorithm_id\"] = params.algorithm_Id;\r\n      algorithmtestinfo(data).then((res) => {\r\n        if (res.code === 20000) {\r\n          let data = res.data[0];\r\n          let algorithm = data.algorithm;\r\n          that.modellist = data.model;\r\n          that.algorithm_name = algorithm.name;\r\n          that.algorithm_Id = algorithm.project_id;\r\n          that.time = algorithm.add_time;\r\n        }\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getFileList();\r\n  },\r\n};\r\n",null]}