{"remainingRequest":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\p_median\\importData1\\pmediants-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\src\\views\\repository\\p_median\\importData1\\pmediants-table.vue","mtime":1609073358490},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projectsAll\\statistics_analyze_web\\webfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport UploadExcelComponent from '@/components/UploadExcel/index.vue'\r\nimport { fetchList, fetchPv, createpmediants, updatepmediants, deletepmediants, downloadpmediants, uploadpmediants, clearpmediants } from '@/api/app01/pmediants'\r\nimport waves from '@/directive/waves' // waves directive\r\nimport { parseTime } from '@/utils'\r\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n  name: 'ComplexTable',\r\n  components: { Pagination, UploadExcelComponent },\r\n  directives: { waves },\r\n  filters: {\r\n    statusFilter(status) {\r\n      const statusMap = {\r\n        published: 'success',\r\n        draft: 'info',\r\n        deleted: 'danger'\r\n      }\r\n      return statusMap[status]\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      tableHeader: [],\r\n      tableKey: 0,\r\n      list: null,\r\n      total: 0,\r\n      listLoading: true,\r\n      project_idOptions: [],\r\n\r\n      listQuery: {\r\n        page: 1,\r\n        limit: 20,\r\n        project_id: undefined,\r\n        sub_names: undefined,\r\n\r\n        sort: '-id'\r\n      },\r\n\r\n      sortOptions: [{ label: '升序', key: '+id' }, { label: '降序', key: '-id' }],\r\n      temp: {\r\n        id: undefined\r\n      },\r\n      dialogFormVisible: false,\r\n      dialogFormVisibleupload: false,\r\n      dialogFormVisibleclear: false,\r\n      dialogStatus: '',\r\n      textMap: {\r\n        update: 'Edit',\r\n        create: 'Create'\r\n      },\r\n      dialogPvVisible: false,\r\n      pvData: [],\r\n      rules: {\r\n        // type: [{ required: true, message: 'type is required', trigger: 'change' }],\r\n        // timestamp: [{ type: 'date', required: true, message: 'timestamp is required', trigger: 'change' }],\r\n        // title: [{ required: true, message: 'title is required', trigger: 'blur' }]\r\n      }\r\n      // downloadLoading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    beforeUpload(file) {\r\n      const isLt1M = file.size / 1024 / 1024 < 1\r\n      if (isLt1M) {\r\n        return true\r\n      }\r\n      this.$message({\r\n        message: 'Please do not upload files larger than 1m in size.',\r\n        type: 'warning'\r\n      })\r\n      return false\r\n    },\r\n\r\n    handleSuccess({ results, header }) {\r\n      this.tableData = results\r\n      this.tableHeader = header\r\n    },\r\n\r\n    getList() {\r\n      this.listLoading = true\r\n      fetchList(this.listQuery).then(response => {\r\n        this.list = response.data.items\r\n        this.total = response.data.total\r\n\r\n        this.project_idOptions = response.data.unique_project_id\r\n\r\n        // Just to simulate the time of the request\r\n        setTimeout(() => {\r\n          this.listLoading = false\r\n        }, 1.5 * 1000)\r\n      })\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1\r\n      this.getList()\r\n    },\r\n    handleModifyStatus(row, status) {\r\n      this.$message({\r\n        message: '操作Success',\r\n        type: 'success'\r\n      })\r\n      row.status = status\r\n    },\r\n    sortChange(data) {\r\n      const { prop, order } = data\r\n      if (prop === 'id') {\r\n        this.sortByID(order)\r\n      }\r\n    },\r\n    sortByID(order) {\r\n      if (order === 'ascending') {\r\n        this.listQuery.sort = '+id'\r\n      } else {\r\n        this.listQuery.sort = '-id'\r\n      }\r\n      this.handleFilter()\r\n    },\r\n    resetTemp() {\r\n      this.temp = {\r\n        id: undefined\r\n      }\r\n    },\r\n    handleCreate() {\r\n      this.resetTemp()\r\n      this.dialogStatus = 'create'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    createData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          // this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\r\n          // this.temp.author = 'vue-element-admin'\r\n          createpmediants(this.temp).then(() => {\r\n            this.list.unshift(this.temp)\r\n            this.dialogFormVisible = false\r\n            this.$notify({\r\n              title: 'Success',\r\n              message: 'Created Successfully',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    handleUpdate(row) {\r\n      this.temp = Object.assign({}, row) // copy obj\r\n      this.dialogStatus = 'update'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n\r\n    updateData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          const tempData = Object.assign({}, this.temp)\r\n          updatepmediants(tempData).then(() => {\r\n            const index = this.list.findIndex(v => v.id === this.temp.id)\r\n            this.list.splice(index, 1, this.temp)\r\n            this.dialogFormVisible = false\r\n            this.$notify({\r\n              title: 'Success',\r\n              message: 'Update Successfully',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    handleDelete(row, index) {\r\n      this.list.splice(index, 1)\r\n      console.log(row.id)\r\n      deletepmediants(row.id).then(() => {\r\n        this.$notify({\r\n          title: 'Success',\r\n          message: 'Update Successfully',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n      })\r\n    },\r\n\r\n    handleFetchPv(pv) {\r\n      fetchPv(pv).then(response => {\r\n        this.pvData = response.data.pvData\r\n        this.dialogPvVisible = true\r\n      })\r\n    },\r\n\r\n    handleDownload() {\r\n      this.listLoading = true\r\n      downloadpmediants(this.listQuery).then(response => {\r\n        // response = response.json();\r\n        this.list = response.data.items\r\n        // console.log('data.................', data)\r\n        const tHeader = ['项目编号', '所属街镇', '产量权重因子', '经度', '纬度', '所属区']\r\n        const filterVal = ['project_id', 'sub_names', 'weight_percentage', 'lng', 'lat', 'district']\r\n        const data = this.formatJson(filterVal)\r\n\r\n        import('@/vendor/Export2Excel').then(excel => {\r\n          excel.export_json_to_excel({\r\n            header: tHeader,\r\n            data,\r\n            filename: '中转站'\r\n          })\r\n        })\r\n        console.log('test13.................')\r\n      })\r\n      this.listLoading = false\r\n    },\r\n\r\n    showHandleUpload() {\r\n      this.dialogFormVisibleupload = true\r\n    },\r\n    showHandleClear() {\r\n      this.dialogFormVisibleclear = true\r\n    },\r\n\r\n    hideHandleUpload() {\r\n      this.dialogFormVisibleupload = false\r\n    },\r\n\r\n    hideHandleClear() {\r\n      this.dialogFormVisibleclear = false\r\n    },\r\n\r\n    handleClear() {\r\n      this.listLoading = true\r\n      this.dialogFormVisibleclear = false\r\n      clearpmediants(this.listQuery).then(() => {\r\n        this.$notify({\r\n          title: 'Success',\r\n          message: '清空成功',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n      })\r\n      this.listLoading = false\r\n      location.reload() // 刷新页面\r\n    },\r\n\r\n    handleUpload() {\r\n      this.dialogFormVisibleupload = false\r\n      console.log('handleUpload..................')\r\n      console.log('this.tableData', this.tableData)\r\n      uploadpmediants(this.tableData).then(() => {\r\n        this.$notify({\r\n          title: 'Success',\r\n          message: '上传成功',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n      })\r\n      location.reload() // 刷新页面\r\n    },\r\n\r\n    handleClick(e) {\r\n      console.log('handleClick................................................')\r\n      const files = e.target.files\r\n      const rawFile = files[0] // only use files[0]\r\n      if (!rawFile) return\r\n      this.upload(rawFile)\r\n    },\r\n\r\n    upload(rawFile) {\r\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\r\n      console.log('upload................................................')\r\n      if (!this.beforeUpload) {\r\n        this.readerData(rawFile)\r\n        return\r\n      }\r\n      const before = this.beforeUpload(rawFile)\r\n      if (before) {\r\n        this.readerData(rawFile)\r\n      }\r\n    },\r\n\r\n    readerData(rawFile) {\r\n      this.loading = true\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.onload = e => {\r\n          const data = e.target.result\r\n          const workbook = XLSX.read(data, { type: 'array' })\r\n          const firstSheetName = workbook.SheetNames[0]\r\n          const worksheet = workbook.Sheets[firstSheetName]\r\n          const header = this.getHeaderRow(worksheet)\r\n          const results = XLSX.utils.sheet_to_json(worksheet)\r\n          this.generateData({ header, results })\r\n          this.loading = false\r\n          resolve()\r\n        }\r\n        reader.readAsArrayBuffer(rawFile)\r\n      })\r\n    },\r\n\r\n    getHeaderRow(sheet) {\r\n      const headers = []\r\n      const range = XLSX.utils.decode_range(sheet['!ref'])\r\n      let C\r\n      const R = range.s.r\r\n      /* start in the first row */\r\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n        /* find the cell in the first row */\r\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n      }\r\n      return headers\r\n    },\r\n    isExcel(file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n    },\r\n\r\n    formatJson(filterVal) {\r\n      return this.list.map(v => filterVal.map(j => {\r\n        if (j === 'timestamp') {\r\n          return parseTime(v[j])\r\n        } else {\r\n          return v[j]\r\n        }\r\n      }))\r\n    },\r\n    getSortClass: function(key) {\r\n      const sort = this.listQuery.sort\r\n      return sort === `+${key}` ? 'ascending' : 'descending'\r\n    }\r\n  }\r\n}\r\n",null]}