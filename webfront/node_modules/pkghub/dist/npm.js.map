{"version":3,"sources":["../libs/npm.js"],"names":[],"mappings":";;;;;;;QASgB,IAAI,GAAJ,IAAI;QAWJ,EAAE,GAAF,EAAE;QAaF,OAAO,GAAP,OAAO;;mBAjCP,KAAK;;;;sBACP,YAAY;;;;uBACN,UAAU;;;;AAE9B,IAAM,MAAM,GAAG;AACb,UAAQ,EAAE,QAAQ;AAClB,WAAS,EAAE,IAAI;CAChB,CAAA;;AAEM,SAAS,IAAI,GAAG;AACrB,SAAO,yBAAY,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/B,qBAAI,IAAI,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,CAAC,EAAK;AAC3B,UAAI,GAAG,EACL,OAAO,GAAG,CAAC,GAAG,CAAC,CAAA;;AAEjB,aAAO,GAAG,CAAC,CAAC,CAAC,CAAA;KACd,CAAC,CAAA;GACH,CAAC,CAAA;CACH;;AAEM,SAAS,EAAE,GAAG;AACnB,SAAO,IAAI,EAAE,CAAC,IAAI,CAAC,UAAA,WAAW,EAAI;AAChC,WAAO,yBAAY,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/B,iBAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,OAAO,EAAK;AAClD,YAAI,GAAG,EACL,OAAO,GAAG,CAAC,GAAG,CAAC,CAAA;;AAEjB,eAAO,GAAG,CAAC,OAAO,CAAC,CAAA;OACpB,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAC,CAAA;CACH;;AAEM,SAAS,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE;AACpC,SAAO,IAAI,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC,EAAI;AACtB,WAAO,yBAAY,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/B,UAAI,CAAC,oBAAE,OAAO,CAAC,OAAO,CAAC,EACrB,OAAO,GAAG,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAA;;AAErD,UAAM,MAAM,GAAG,GAAG,GAChB,CAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAE,GAC1B,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;;AAExB,aAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;;AAE1C,eAAS,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE;AAC7B,YAAI,GAAG;AACL,iBAAO,GAAG,CAAC,GAAG,CAAC,CAAA;SAAA,AAEjB,OAAO,GAAG,CAAC,MAAM,CAAC,CAAA;OACnB;KACF,CAAC,CAAA;GACH,CAAC,CAAA;CACH","file":"libs/npm.js","sourcesContent":["import npm from 'npm'\nimport _ from 'underscore'\nimport Promise from 'bluebird'\n\nconst config = {\n  loglevel: 'silent',\n  parseable: true\n}\n\nexport function load() {\n  return new Promise((res, rej) => {\n    npm.load(config, (err, n) => {\n      if (err)\n        return rej(err)\n\n      return res(n)\n    })\n  })\n}\n\nexport function ls() {\n  return load().then(npmInstance => {\n    return new Promise((res, rej) => {\n      npmInstance.commands.ls([], true, (err, modules) => {\n        if (err)\n          return rej(err)\n\n        return res(modules)\n      })\n    })\n  })\n}\n\nexport function install(modules, dir) {\n  return load().then(n => {\n    return new Promise((res, rej) => {\n      if (!_.isArray(modules)) \n        return rej(new Error('Modules name must be array'))\n\n      const params = dir ? \n        [ dir, modules, callback ] : \n        [ modules, callback ];\n\n      return n.commands.install.apply(n, params)\n\n      function callback(err, result) {\n        if (err)\n          return rej(err)\n\n        return res(result)\n      }\n    })\n  })\n}\n"]}