"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var echarts = require("echarts/index.blank");

var _componentViewControlMixin = require("../../component/common/componentViewControlMixin");

var _componentPostEffectMixin = require("../../component/common/componentPostEffectMixin");

var _componentLightMixin = require("../../component/common/componentLightMixin");

var _componentShadingMixin = require("../../component/common/componentShadingMixin");

var _geo3DModelMixin = require("../../coord/geo3D/geo3DModelMixin");

var _format = require("../../util/format");

var _formatTooltip = require("../common/formatTooltip");

var _geo3DCreator = require("../../coord/geo3DCreator");

function transformPolygon(mapbox3DCoordSys, poly) {
  var newPoly = [];

  for (var k = 0; k < poly.length; k++) {
    newPoly.push(mapbox3DCoordSys.dataToPoint(poly[k]));
  }

  return newPoly;
}

var Map3DSeries = echarts.extendSeriesModel({
  type: 'series.map3D',
  layoutMode: 'box',
  coordinateSystem: null,
  visualStyleAccessPath: 'itemStyle',
  optionUpdated: function (newOpt) {
    newOpt = newOpt || {};
    var coordSysType = this.get('coordinateSystem');

    if (coordSysType == null || coordSysType === 'geo3D') {
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var propsNeedToCheck = ['left', 'top', 'width', 'height', 'boxWidth', 'boxDepth', 'boxHeight', 'light', 'viewControl', 'postEffect', 'temporalSuperSampling', 'environment', 'groundPlane'];
      var ignoredProperties = [];
      propsNeedToCheck.forEach(function (propName) {
        if (newOpt[propName] != null) {
          ignoredProperties.push(propName);
        }
      });

      if (ignoredProperties.length) {
        console.warn('Property %s in map3D series will be ignored if coordinate system is %s', ignoredProperties.join(', '), coordSysType);
      }
    }

    if (this.get('groundPlane.show')) {
      // Force disable groundPlane if map3D has other coordinate systems.
      this.option.groundPlane.show = false;
    } // Reset geo.


    this._geo = null;
  },
  getInitialData: function (option) {
    option.data = this.getFilledRegions(option.data, option.map);
    var dimensions = echarts.helper.createDimensions(['value'], option.data);
    var list = new echarts.List(dimensions, this);
    list.initData(option.data);
    var regionModelMap = {};
    list.each(function (idx) {
      var name = list.getName(idx);
      var itemModel = list.getItemModel(idx);
      regionModelMap[name] = itemModel;
    });
    this._regionModelMap = regionModelMap;
    return list;
  },
  formatTooltip: function (dataIndex) {
    return (0, _formatTooltip.default)(this, dataIndex);
  },
  getRegionModel: function (idx) {
    var name = this.getData().getName(idx);
    return this._regionModelMap[name] || new echarts.Model(null, this);
  },
  getRegionPolygonCoords: function (idx) {
    var coordSys = this.coordinateSystem;
    var name = this.getData().getName(idx);

    if (coordSys.transform) {
      var region = coordSys.getRegion(name);
      return region ? region.geometries : [];
    } else {
      if (!this._geo) {
        this._geo = _geo3DCreator.default.createGeo3D(this);
      }

      var region = this._geo.getRegion(name);

      var ret = [];

      for (var k = 0; k < region.geometries.length; k++) {
        var geo = region.geometries[k];
        var interiors = [];
        var exterior = transformPolygon(coordSys, geo.exterior);

        if (interiors && interiors.length) {
          for (var m = 0; m < geo.interiors.length; m++) {
            interiors.push(transformPolygon(coordSys, interiors[m]));
          }
        }

        ret.push({
          interiors: interiors,
          exterior: exterior
        });
      }

      return ret;
    }
  },

  /**
   * Format label
   * @param {string} name Region name
   * @param {string} [status='normal'] 'normal' or 'emphasis'
   * @return {string}
   */
  getFormattedLabel: function (dataIndex, status) {
    var text = _format.default.getFormattedLabel(this, dataIndex, status);

    if (text == null) {
      text = this.getData().getName(dataIndex);
    }

    return text;
  },
  defaultOption: {
    // Support geo3D, mapbox, maptalks3D
    coordinateSystem: 'geo3D',
    // itemStyle: {},
    // height,
    // label: {}
    data: null
  }
});
echarts.util.merge(Map3DSeries.prototype, _geo3DModelMixin.default);
echarts.util.merge(Map3DSeries.prototype, _componentViewControlMixin.default);
echarts.util.merge(Map3DSeries.prototype, _componentPostEffectMixin.default);
echarts.util.merge(Map3DSeries.prototype, _componentLightMixin.default);
echarts.util.merge(Map3DSeries.prototype, _componentShadingMixin.default);
var _default = Map3DSeries;
exports.default = _default;