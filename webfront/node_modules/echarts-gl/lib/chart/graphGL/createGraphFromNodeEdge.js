"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var echarts = require("echarts/index.blank");

var _Graph = require("echarts/lib/data/Graph");

var _linkList = require("echarts/lib/data/helper/linkList");

var _retrieve = require("../../util/retrieve");

function _default(nodes, edges, hostModel, directed, beforeLink) {
  var graph = new _Graph.default(directed);

  for (var i = 0; i < nodes.length; i++) {
    graph.addNode(_retrieve.default.firstNotNull( // Id, name, dataIndex
    nodes[i].id, nodes[i].name, i), i);
  }

  var linkNameList = [];
  var validEdges = [];
  var linkCount = 0;

  for (var i = 0; i < edges.length; i++) {
    var link = edges[i];
    var source = link.source;
    var target = link.target; // addEdge may fail when source or target not exists

    if (graph.addEdge(source, target, linkCount)) {
      validEdges.push(link);
      linkNameList.push(_retrieve.default.firstNotNull(link.id, source + ' > ' + target));
      linkCount++;
    }
  }

  var nodeData; // FIXME, support more coordinate systems.

  var dimensionNames = echarts.helper.createDimensions(['value'], nodes);
  nodeData = new echarts.List(dimensionNames, hostModel);
  nodeData.initData(nodes);
  var edgeData = new echarts.List(['value'], hostModel);
  edgeData.initData(validEdges, linkNameList);
  beforeLink && beforeLink(nodeData, edgeData);
  (0, _linkList.default)({
    mainData: nodeData,
    struct: graph,
    structAttr: 'graph',
    datas: {
      node: nodeData,
      edge: edgeData
    },
    datasAttr: {
      node: 'data',
      edge: 'edgeData'
    }
  }); // Update dataIndex of nodes and edges because invalid edge may be removed

  graph.update();
  return graph;
}

;